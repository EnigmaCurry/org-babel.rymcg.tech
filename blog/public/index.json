[
{
	"uri": "https://blog.rymcg.tech/ox-hugo/",
	"title": "Make your own website like this",
	"tags": [],
	"description": "",
	"content": " This is the source for my website at blog.rymcg.tech, a technology blog written in org-mode and published with ox-hugo.\nThe sections below contain the entirety of the website: the articles and blog posts, its configuration, the templates, themes, build process, and deployment scripts. If my website were to go down, I could recreate it from nothing but this file (plus any static assets, images, etc.)\nThis is a self-documenting deployment environment, using a literate programming style written with org-babel code blocks. Download the the org source file and you can edit it to make any customizations, and build your own website just like this one.\nDependencies My configuration consists of:\n Emacs 25 Org Mode 9 from the project repos Hugo git:master  I\u0026rsquo;m using a dev build using this script, until this fix is in.   Install Emacs, org-mode, and hugo, by following the links above.\nox-hugo This is the main config, it configures ox-hugo, initializes our blog directory, and the sets up hugo server to run inside an Emacs eshell.\nCreate in ~/.emacs.d/blog.el (defun rymcg/org-babel-eval-blocks-in-file (filepath block-list) \u0026#34;Open an Org file and eval a list of named code blocks in it\u0026#34; (save-window-excursion (find-file filepath) (dolist (codeblock block-list) (org-babel-goto-named-src-block codeblock) (let ((org-confirm-babel-evaluate nil)) (org-babel-execute-src-block-maybe))))) (use-package ox-hugo :ensure t :after ox :init (setq org-hugo-external-file-extensions-allowed-for-copying \u0026#39;(org tex jpg png svg pdf)) (setq my/blog-file (expand-file-name \u0026#34;~/git/rymcg.tech/blog.org\u0026#34;)) (setq my/hugo-root (expand-file-name \u0026#34;~/git/rymcg.tech/blog\u0026#34;)) (setq my/hugo-server-url \u0026#34;http://localhost:1313\u0026#34;) (defun blog-init () ; Tangle all files: (org-babel-tangle-file my/blog-file) ; Create theme files if necessary: (rymcg/org-babel-eval-blocks-in-file my/blog-file \u0026#39;(\u0026#34;hugo-import-theme\u0026#34;))) (blog-init) (defun hugo-server-start () \u0026#34;Start hugo server in an inferior shell\u0026#34; (interactive) (let ((eshell-buffer-name (concat \u0026#34;*hugo-server-\u0026#34; my/hugo-root \u0026#34;*\u0026#34;))) (if (bufferp (get-buffer eshell-buffer-name)) (kill-buffer eshell-buffer-name)) (eshell) (eshell-return-to-prompt) (insert (concat \u0026#34;cd \u0026#34; my/hugo-root)) (eshell-send-input) (insert \u0026#34;hugo server -D --navigateToChanged\u0026#34;) (eshell-send-input) (browse-url my/hugo-server-url) (message eshell-buffer-name)))) Hugo site skeleton Here\u0026rsquo;s my main hugo config file:\nCreate in ~/git/rymcg.tech/blog/config.yml ### This file is auto-generated. Do not edit! ### Your changes will get overwritten. ### Look in ~/git/rymcg.tech/config.org for the source. baseURL: \u0026#34;https://blog.rymcg.tech/\u0026#34; languageCode: \u0026#34;en-us\u0026#34; DefaultContentLanguage: \u0026#34;en\u0026#34; title: \u0026#34;rymcg.tech\u0026#34; theme: \u0026#34;docdock\u0026#34; pygmentsCodeFences: true pygmentsUseClasses: true params: noHomeIcon: true noSearch: false showVisitedLinks: true ordersectionsby: \u0026#34;weight\u0026#34; themeVariant: \u0026#34;rymcg\u0026#34; subTitle: \u0026#34;Technology by Ryan McGuire\u0026#34; outputs: home: - HTML - RSS - JSON mediaTypes: \u0026#34;text/plain\u0026#34;: suffix: \u0026#34;org\u0026#34; Create our site header:\nCreate in ~/git/rymcg.tech/blog/content/_header.md rymcg.tech Import the theme:\nRun in ~/git/rymcg.tech/blog if [ ! -d themes/docdock ]; then mkdir -p themes git submodule add -f https://github.com/EnigmaCurry/hugo-theme-docdock themes/docdock fi Create our own theme variant:\nCreate in ~/git/rymcg.tech/blog/static/css/theme-rymcg.css :root{ --MAIN-BACK-color:#ddd; --MAIN-TXT-color: #000; --MAIN-LINK-color:#3995b1; --MAIN-HOVER-color:#c51212; --SIDE-MAIN-color:#444; --SIDE-MAIN-TXT-color:#fff; --SIDE-FOCUS-BACK-color:#707070; --SIDE-FOCUS-FORE-color:black; --MENU-LINK-color:#fff; --MENU-ACTIVE-BACK-color:#505050; --MENU-ACTIVE-LINK-color:white; --NAV-HOVER-color:#bbb; } #header-wrapper { border-bottom: none; } #sidebar ul li.visited \u0026gt; a .read-icon { color: var(--SIDE-MAIN-color); } a { color: var(--MAIN-LINK-color); } a:hover { color: var(--MAIN-HOVER-color); } body { background-color: var(--MAIN-BACK-color); color: var(--MAIN-TXT-color) !important; } #body a.highlight:after { background-color: var(--MAIN-HOVER-color); } #sidebar { background-color: var(--SIDE-MAIN-color); } #sidebar #header-wrapper { background: var(--SIDE-MAIN-color); color: var(--BF-color) border-color: var(--SIDE-FOCUS-BACK-color); } #sidebar .searchbox { border-color: var(--BF-color); background: var(--SIDE-FOCUS-BACK-color); } #sidebar ul.topics \u0026gt; li.parent, #sidebar ul.topics \u0026gt; li.active { background: var(--SIDE-FOCUS-BACK-color); } #sidebar .searchbox * { color: var(--SIDE-FOCUS-FORE-color); } #sidebar a , #sidebar a:hover { color: var(--MENU-LINK-color); } #sidebar .parent li, #sidebar .active li { border-color: var(--MENU-ACTIVE-LINK-color); } #sidebar ul li.active \u0026gt; a { background: var(--MENU-ACTIVE-BACK-color); color: var(--MENU-ACTIVE-LINK-color) !important; } #sidebar ul li .category-icon { color: var(--MENU-LINK-color); } #sidebar #shortcuts h3 { color: var(--SIDE-MAIN-TXT-color); } .footline { border-color: var(--SIDE-FOCUS-BACK-color); } div.block-header { color: #fff; padding-left: 1em; font-family: monospace; font-weight: bold; border-radius: 8px 8px 0 0; } div.block-header.fn { background-color: #4e3a82; } div.block-header.exec { background-color: #b93838; } div.block-header.example { background-color: #4d4b54; } .copy-to-clipboard { margin-top: -1px; } pre { border-radius: 0 0 8px 8px; } pre .copy-to-clipboard { background-color: #fff; border: 1px solid #272a2c !important; } pre .copy-to-clipboard:hover { background-color: #ffa; } div#tags { float: none; } div#breadcrumbs { width: calc(100% - 20px); } div#body-inner { max-width: 100ch; } div#body-inner pre { margin-top: 0; } #body .nav:hover { background-color: var(--NAV-HOVER-color); } Most syntax highlighting is done with Chroma, which is builtin to hugo. The site uses the perldoc theme:\nCreate in ~/git/rymcg.tech/blog/static/css/theme-rymcg.css /* perldoc syntax highlight style */ /* Background */ .chroma { background-color: #eeeedd } /* Error */ .chroma .err { color: #a61717; background-color: #e3d2d2 } /* LineHighlight */ .chroma .hl { background-color: #ffffcc; display: block; width: 100% } /* LineNumbers */ .chroma .ln { ; margin-right: 0.4em; padding: 0 0.4em 0 0.4em; } /* Keyword */ .chroma .k { color: #8b008b; font-weight: bold } /* KeywordConstant */ .chroma .kc { color: #8b008b; font-weight: bold } /* KeywordDeclaration */ .chroma .kd { color: #8b008b; font-weight: bold } /* KeywordNamespace */ .chroma .kn { color: #8b008b; font-weight: bold } /* KeywordPseudo */ .chroma .kp { color: #8b008b; font-weight: bold } /* KeywordReserved */ .chroma .kr { color: #8b008b; font-weight: bold } /* KeywordType */ .chroma .kt { color: #00688b; font-weight: bold } /* NameAttribute */ .chroma .na { color: #658b00 } /* NameBuiltin */ .chroma .nb { color: #658b00 } /* NameClass */ .chroma .nc { color: #008b45; font-weight: bold } /* NameConstant */ .chroma .no { color: #00688b } /* NameDecorator */ .chroma .nd { color: #707a7c } /* NameException */ .chroma .ne { color: #008b45; font-weight: bold } /* NameFunction */ .chroma .nf { color: #008b45 } /* NameNamespace */ .chroma .nn { color: #008b45 } /* NameTag */ .chroma .nt { color: #8b008b; font-weight: bold } /* NameVariable */ .chroma .nv { color: #00688b } /* LiteralString */ .chroma .s { color: #cd5555 } /* LiteralStringAffix */ .chroma .sa { color: #cd5555 } /* LiteralStringBacktick */ .chroma .sb { color: #cd5555 } /* LiteralStringChar */ .chroma .sc { color: #cd5555 } /* LiteralStringDelimiter */ .chroma .dl { color: #cd5555 } /* LiteralStringDoc */ .chroma .sd { color: #cd5555 } /* LiteralStringDouble */ .chroma .s2 { color: #cd5555 } /* LiteralStringEscape */ .chroma .se { color: #cd5555 } /* LiteralStringHeredoc */ .chroma .sh { color: #1c7e71; font-style: italic } /* LiteralStringInterpol */ .chroma .si { color: #cd5555 } /* LiteralStringOther */ .chroma .sx { color: #cb6c20 } /* LiteralStringRegex */ .chroma .sr { color: #1c7e71 } /* LiteralStringSingle */ .chroma .s1 { color: #cd5555 } /* LiteralStringSymbol */ .chroma .ss { color: #cd5555 } /* LiteralNumber */ .chroma .m { color: #b452cd } /* LiteralNumberBin */ .chroma .mb { color: #b452cd } /* LiteralNumberFloat */ .chroma .mf { color: #b452cd } /* LiteralNumberHex */ .chroma .mh { color: #b452cd } /* LiteralNumberInteger */ .chroma .mi { color: #b452cd } /* LiteralNumberIntegerLong */ .chroma .il { color: #b452cd } /* LiteralNumberOct */ .chroma .mo { color: #b452cd } /* OperatorWord */ .chroma .ow { color: #8b008b } /* Comment */ .chroma .c { color: #228b22 } /* CommentHashbang */ .chroma .ch { color: #228b22 } /* CommentMultiline */ .chroma .cm { color: #228b22 } /* CommentSingle */ .chroma .c1 { color: #228b22 } /* CommentSpecial */ .chroma .cs { color: #8b008b; font-weight: bold } /* CommentPreproc */ .chroma .cp { color: #1e889b } /* CommentPreprocFile */ .chroma .cpf { color: #1e889b } /* GenericDeleted */ .chroma .gd { color: #aa0000 } /* GenericEmph */ .chroma .ge { font-style: italic } /* GenericError */ .chroma .gr { color: #aa0000 } /* GenericHeading */ .chroma .gh { color: #000080; font-weight: bold } /* GenericInserted */ .chroma .gi { color: #00aa00 } /* GenericOutput */ .chroma .go { color: #888888 } /* GenericPrompt */ .chroma .gp { color: #555555 } /* GenericStrong */ .chroma .gs { font-weight: bold } /* GenericSubheading */ .chroma .gu { color: #800080; font-weight: bold } /* GenericTraceback */ .chroma .gt { color: #aa0000 } /* TextWhitespace */ .chroma .w { color: #bbbbbb } As a fallback, highlight.js is used for blocks that chroma can\u0026rsquo;t handle. Here\u0026rsquo;s a slight mod of the purebasic theme:\nCreate in ~/git/rymcg.tech/blog/static/css/hybrid.css .hljs { background: #eeeedd !important; display: block; overflow-x: auto; padding: 0.5em; } .hljs,.hljs-type,.hljs-function,.hljs-name,.hljs-number,.hljs-attr,.hljs-params,.hljs-subst { color: #000000; } .hljs-comment,.hljs-regexp,.hljs-section,.hljs-selector-pseudo,.hljs-addition { color: #00AAAA; } .hljs-title,.hljs-tag,.hljs-variable,.hljs-code { color: #006666; } .hljs-keyword,.hljs-class,.hljs-meta-keyword,.hljs-selector-class,.hljs-built_in,.hljs-builtin-name { color: #006666; font-weight: bold; } .hljs-string,.hljs-selector-attr { color: #0080FF; } .hljs-symbol,.hljs-link,.hljs-deletion,.hljs-attribute { color: #924B72; } .hljs-meta,.hljs-literal,.hljs-selector-id { color: #924B72; font-weight: bold; } .hljs-strong,.hljs-name { font-weight: bold; } .hljs-emphasis { font-style: italic; } Code block headers When reading code blocks in Org file source it\u0026rsquo;s pretty easy to see what file it\u0026rsquo;s referring to, by looking at the :tangle parameter:\nExample #+BEGIN_SRC emacs-lisp :tangle /some/path/example.el (messsage \u0026#34;example\u0026#34;) #+END_SRC But when this is exported to HTML, you don\u0026rsquo;t get to see the :tangle part, which means either the reader has to infer it from the context, or you need to add extra text to the document. The first form is confusing to the user reading in his web browser. The latter form means you\u0026rsquo;re repeating yourself, and when you refactor path names, you will have an additional thing you need to edit, or else an opportunity arises for the documentation to diverge from the code. Messy.\nLet\u0026rsquo;s automatically add headers to all the code blocks exported to HTML.\n Tangled code should have header with Create in $FILE Shell code blocks should have header with Run in $DIR Example blocks should have header with Example  Create in ~/.emacs.d/blog.el ; original credit to John Kitchin - https://stackoverflow.com/a/38876439/56560 (defun rymcg/org-hugo-add-tangle-names-to-export (backend) (let ((src-blocks (org-element-map (org-element-parse-buffer) \u0026#39;src-block #\u0026#39;identity))) (setq src-blocks (nreverse src-blocks)) (loop for src in src-blocks do (goto-char (org-element-property :begin src)) (let ((tangled-name (cdr (assoc :tangle (nth 2 (org-babel-get-src-block-info))))) (directory (cdr (assoc :dir (nth 2 (org-babel-get-src-block-info))))) (language-name (first (org-babel-get-src-block-info)))) (if (not (equal tangled-name \u0026#34;no\u0026#34;)) ; tangle files get a header for the file name: (insert (format \u0026#34;\\n#+HTML: \u0026lt;div class=\u0026#39;block-header fn\u0026#39;\u0026gt;Create in %s\u0026lt;/div\u0026gt;\\n\u0026#34; tangled-name)) (if (equal language-name \u0026#34;shell\u0026#34;) ; Non-tangled shell scripts get a header indicating to run it: ; Show the directory if it\u0026#39;s set: (insert (format \u0026#34;\\n#+HTML: \u0026lt;div class=\u0026#39;block-header exec\u0026#39;\u0026gt;Run%s\u0026lt;/div\u0026gt;\\n\u0026#34; (if (equal directory nil) \u0026#34;\u0026#34; (format \u0026#34; in %s\u0026#34; directory))))))))) (let ((example-blocks (org-element-map (org-element-parse-buffer) \u0026#39;example-block #\u0026#39;identity))) (setq example-blocks (nreverse example-blocks)) (loop for example in example-blocks do (goto-char (org-element-property :begin example)) (insert (format \u0026#34;\\n#+HTML: \u0026lt;div class=\u0026#39;block-header example\u0026#39;\u0026gt;Example\u0026lt;/div\u0026gt;\\n\u0026#34;))))) (defadvice org-hugo-export-subtree-to-md (around org-hugo-export-advice) (let ((org-export-before-processing-hook \u0026#39;(rymcg/org-hugo-add-tangle-names-to-export))) ad-do-it)) (ad-activate \u0026#39;org-hugo-export-subtree-to-md)"
},
{
	"uri": "https://blog.rymcg.tech/",
	"title": "Front Page",
	"tags": [],
	"description": "",
	"content": " Welcome This will eventually be a blog.\n"
},
{
	"uri": "https://blog.rymcg.tech/emacs/def-advice/",
	"title": "def-advice",
	"tags": [],
	"description": "",
	"content": "It\u0026rsquo;s cool..\n"
},
{
	"uri": "https://blog.rymcg.tech/emacs/emacs-post-2/",
	"title": "second emacs post",
	"tags": [],
	"description": "",
	"content": "Hi you gnu elpanizers\n"
},
{
	"uri": "https://blog.rymcg.tech/emacs/emacs-post-1/",
	"title": "first emacs post and a rather unfortunately long title that just goes on and on and on and on.",
	"tags": [],
	"description": "",
	"content": " Hi emacsers!\nSubheading 1 Subheading 2 "
},
{
	"uri": "https://blog.rymcg.tech/emacs/elips-tips/",
	"title": "elisp tips",
	"tags": [],
	"description": "",
	"content": "(message \u0026#34;Hi Emacsians!\u0026#34;)"
},
{
	"uri": "https://blog.rymcg.tech/book1/",
	"title": "Book",
	"tags": [],
	"description": "",
	"content": "Book 1 index.\nThis type of organization will generate this in the content/ directory:\nExample \u0026gt; tree book1 book1 ├── chapter1 │ ├── _index.md │ ├── section1.md │ └── section2.md ├── chapter2 │ ├── _index.md │ ├── section1.md │ └── section2.md └── _index.md  Chapter 1  Chapter 1 Section 1 Chapter 1 Section 2  Chapter 2  Chapter 2 Section 1 Chapter 2 Section 2   "
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter1/",
	"title": "Chapter 1 Index",
	"tags": [],
	"description": "",
	"content": "Introduction for chapter 1\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter2/",
	"title": "Chapter 2 Index",
	"tags": [],
	"description": "",
	"content": "Introduction for chapter 2\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter1/section1/",
	"title": "sub section 1",
	"tags": [],
	"description": "",
	"content": "Section 1 of chapter 1\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter2/section1/",
	"title": "sub section 1",
	"tags": [],
	"description": "",
	"content": "Section 1 of chapter 2\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter1/section2/",
	"title": "sub section 2",
	"tags": [],
	"description": "",
	"content": "Section 2 of chapter 1\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter2/section2/",
	"title": "sub section 2",
	"tags": [],
	"description": "",
	"content": "Section 2 of chapter 2\n"
},
{
	"uri": "https://blog.rymcg.tech/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "rymcg.tech\n"
},
{
	"uri": "https://blog.rymcg.tech/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.rymcg.tech/emacs/",
	"title": "Emacs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.rymcg.tech/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]