[
{
	"uri": "https://blog.rymcg.tech/ox-hugo/",
	"title": "Make your own website like this",
	"tags": [],
	"description": "",
	"content": " This is the source for my website at blog.rymcg.tech, a technology blog written in org-mode and published with ox-hugo.\nThe sections below contain the entirety of the website: the articles and blog posts, its configuration, the templates, themes, build process, and deployment scripts. If my website were to go down, I could recreate it from nothing but this file (plus any static assets, images, etc.)\nThis is a self-documenting deployment environment, using a literate programming style written with org-babel code blocks. Download the the org source file and you can edit it to make any customizations, and build your own website just like this one.\nDependencies My configuration consists of:\n Emacs 25 Org Mode 9 from the project repos Hugo git:master  Deficiencies  Path names are defined multiple places. I have not yet found a way to make org-babel reference a single common root directory. I can set :dir in the parent tree, but I can\u0026rsquo;t seem to append a filename on to the end of it or reference a variable in that context. So just be aware that (for now) you have to search and replace ~/git/rymcg.tech/, at multiple places in this file and change them to your directory structure. (There may be other things, I expect you to be the type of person who reads code before running it\u0026hellip;..) My netlify deploy is pure static files. I have my .gitignore setup to ignore commiting anything but this file (blog.org) and the public directory. Eventually I want the server to build the site, but only after hugo development cycle settles down and they install a good version for things like syntax highlighing properly. I\u0026rsquo;m guessing there\u0026rsquo;s some orchestation possible to get the master versions, as in the script in the next section, but I figure it\u0026rsquo;s easier to just wait a few days..  Install dev version of hugo Currently I use the latest devolpment version of hugo, because I\u0026rsquo;m waiting for recent bugfixes to make it into stable. Here is kaushalmodi\u0026rsquo;s script with a few tweaks. (Watch out, I hardcoded $GOPATH)\n# /home/kmodi/go.apps/src/github.com/gohugoio/hugo/README.md # http://matthewkwilliams.com/index.php/2014/09/28/go-executables-are-statically-linked-except-when-they-are-not/  here=$(pwd) hugo_src=\u0026#34;github.com/gohugoio/hugo\u0026#34; chroma_src=\u0026#34;github.com/alecthomas/chroma\u0026#34; export GOPATH=$HOME/git/rymcg.tech/blog/go mkdir -p $GOPATH export CGO_ENABLED=0 export GO_EXTLINK_ENABLED=0 # https://discuss.gohugo.io/t/started-getting-failed-to-normalize-url-string-returning-in/5034/7?u=kaushalmodi # Do govendor sync to prevent issues like this: https://github.com/gohugoio/hugo/issues/2919 if ! hash govendor 2\u0026gt;/dev/null then go get -u -v github.com/kardianos/govendor fi # Install hugo for the first time so that the ${GOPATH}/src/${hugo_src} # directory gets populated. if [[ ! -d \u0026#34;${GOPATH}/src/${hugo_src}\u0026#34; ]] || ( ! hash hugo 2\u0026gt;/dev/null ) then go get -u -v ${hugo_src} fi # Update to hugo master branch cd \u0026#34;${GOPATH}/src/${hugo_src}\u0026#34; || exit git fetch --all # fetch new branch names if any git checkout master # git fetch --all # Force update the vendor file in case it got changed git reset --hard origin/master # Synchronize all the dependent packages as per the just updated vendor file govendor sync # Update dependent packages from their master branches # govendor fetch github.com/chaseadamsio/goorgeous # govendor fetch github.com/chaseadamsio/goorgeous@=fixNewlineParagraphs  # Tue Sep 26 11:28:47 EDT 2017 - kmodi # Turns out that the chroma package contains sub-packages too.. so have to # include all separately. # govendor fetch ${chroma_src} # govendor fetch ${chroma_src}/formatters # govendor fetch ${chroma_src}/formatters/html # govendor fetch ${chroma_src}/lexers # govendor fetch ${chroma_src}/styles  # https://discourse.gohugo.io/t/building-hugo-with-the-latest-version-of-chroma/8543/2?u=kaushalmodi go get -u -v ${chroma_src}/... # make vendor rm -rf \u0026#34;${GOPATH}/src/${hugo_src}/vendor/${chroma_src}\u0026#34; hugo_commithash=$(git rev-parse --short HEAD 2\u0026gt;/dev/null) chroma_commithash=$(cd \u0026#34;${GOPATH}/src/${chroma_src}\u0026#34; \u0026amp;\u0026amp; git rev-parse --short HEAD 2\u0026gt;/dev/null) builddate=$(date +%FT%T%z) go install -v \\  -ldflags \u0026#34;-X ${hugo_src}/hugolib.CommitHash=${hugo_commithash}:chroma-${chroma_commithash}\\ -X ${hugo_src}/hugolib.BuildDate=${builddate}\u0026#34; \\  ${hugo_src} cd \u0026#34;${here}\u0026#34; || exit Install  Create a new repository. I create mine in ~/git/rymcg.tech:  Run git init ~/git/rymcg.tech  Download blog.org, saving it to your new repository in ~/git/rymcg.tech. Use this code in your Emacs init file:  Example (let ((blog-init (expand-file-name \u0026#34;~/.emacs.d/blog.el\u0026#34;))) (if (file-exists-p blog-init) (load-file blog-init)))  (Don\u0026rsquo;t worry, blog.el is taken care of in the next part.)  Run! These are the manual steps for building the website directly from org-mode. Later on we\u0026rsquo;ll build up a script to automate all this. So, although these steps are a bit tedious, this should make it easier to conceptualize what this thing does:\n Open up your copy of blog.org, in Emacs. If you installed org-mode correctly, all should be true:  The file will open up in org-mode automatically, because it ends in .org. You should see Org in the modeline. M-x org-version should say something like 9.1 or higher.  Search and replace all the ~/git/rymcg.tech directory references to the path of your local website checkout. Save the file. It\u0026rsquo;s yours, remeber! Tangle all the org-babel code blocks: (aka. \u0026lsquo;render all code blocks marked with :tangle to the specified external file.\u0026lsquo;)  Type C-c C-v t (or M-x org-babel-tangle) This creates ~/.emacs.d/blog.el  Restart Emacs to reload the config.  Steps to run each time you want to publish blog.org:\n Run ox-hugo to export to markdown:  Type C-c C-e H A (or C-1 M-x org-hugo-export-subtree-to-md)  Optionally re-tangle config files, C-c C-v t  (You only really have to run this when you change blocks with :tangle)  Run hugo to translate the markdown to the public html:  Type M-x eshell-command RET bash -c 'cd ~/git/rymcg.tech/blog; ./go/bin/hugo' That last one I was kidding. I just open a terminal in ~/git/rymcg.tech/blog and run ./go/bin/hugo.  Run the embedded hugo server:  Type M-x hugo-server-start. The site should automatically open in your browser. If you have a live reload extension installed, the site should refresh automatically when you make changes. Configure browse-url-browser-function if it opens in the wrong browser.   Seriously, this needs automation. Stat.\nox-hugo This is the main config, it configures ox-hugo, initializes our blog directory, and sets up hugo server to run inside an Emacs eshell.\nCreate in ~/.emacs.d/blog.el (use-package org-babel-eval-in-repl :ensure t :init (require \u0026#39;eval-in-repl-shell)) (use-package ox-hugo :ensure t :after ox :init (setq org-hugo-external-file-extensions-allowed-for-copying \u0026#39;(org tex jpg png svg pdf)) (setq my/blog-file (expand-file-name \u0026#34;~/git/rymcg.tech/blog.org\u0026#34;)) (setq my/hugo-root (expand-file-name \u0026#34;~/git/rymcg.tech/blog\u0026#34;)) (setq my/hugo-server-url \u0026#34;http://localhost:1313\u0026#34;) ; blog related functions defined inside of use-package\u0026#39; =:init= conveniently ; dissappear from your system if the package install fails. So I kind of like that, (defun blog-init () ; Tangle all files: (org-babel-tangle-file my/blog-file) ; Create theme files if necessary: ((lambda (filepath block-list) \u0026#34;Open an Org file and eval a list of named code blocks in it\u0026#34; (save-window-excursion (find-file filepath) (dolist (codeblock block-list) (org-babel-goto-named-src-block codeblock) (let ((org-confirm-babel-evaluate nil)) (org-babel-execute-src-block-maybe))))) my/blog-file \u0026#39;(\u0026#34;hugo-import-theme\u0026#34;))) (blog-init) (defun hugo-server-start () \u0026#34;Start hugo server in an inferior shell\u0026#34; (interactive) (let ((eshell-buffer-name (concat \u0026#34;*hugo-server-\u0026#34; my/hugo-root \u0026#34;*\u0026#34;))) (if (bufferp (get-buffer eshell-buffer-name)) (kill-buffer eshell-buffer-name)) (eshell) (eshell-return-to-prompt) (insert (concat \u0026#34;cd \u0026#34; my/hugo-root)) (eshell-send-input) (insert \u0026#34;hugo server -D --navigateToChanged\u0026#34;) (eshell-send-input) (browse-url my/hugo-server-url) (message eshell-buffer-name)))) Hugo site skeleton Here\u0026rsquo;s my main hugo config file:\nCreate in ~/git/rymcg.tech/blog/config.yml baseURL: \u0026#34;https://blog.rymcg.tech/\u0026#34; languageCode: \u0026#34;en-us\u0026#34; DefaultContentLanguage: \u0026#34;en\u0026#34; title: \u0026#34;rymcg.tech\u0026#34; theme: \u0026#34;docdock\u0026#34; pygmentsCodeFences: true pygmentsUseClasses: true params: noHomeIcon: true noSearch: false showVisitedLinks: true ordersectionsby: \u0026#34;weight\u0026#34; themeVariant: \u0026#34;rymcg\u0026#34; subTitle: \u0026#34;Technology by Ryan McGuire\u0026#34; outputs: home: - HTML - RSS - JSON mediaTypes: \u0026#34;text/plain\u0026#34;: suffix: \u0026#34;org\u0026#34; Create our site header:\nCreate in ~/git/rymcg.tech/blog/content/_header.md rymcg.tech Import the theme:\nRun in ~/git/rymcg.tech/blog if [ ! -d themes/docdock ]; then mkdir -p themes git submodule add -f https://github.com/EnigmaCurry/hugo-theme-docdock themes/docdock fi Create our own theme variant:\nCreate in ~/git/rymcg.tech/blog/static/css/theme-rymcg.css :root{ --MAIN-BACK-color:#ddd; --MAIN-TXT-color: #000; --MAIN-LINK-color:#3995b1; --MAIN-HOVER-color:#c51212; --SIDE-MAIN-color:#444; --SIDE-MAIN-TXT-color:#fff; --SIDE-FOCUS-BACK-color:#707070; --SIDE-FOCUS-FORE-color:black; --MENU-LINK-color:#fff; --MENU-ACTIVE-BACK-color:#505050; --MENU-ACTIVE-LINK-color:white; --NAV-HOVER-color:#bbb; } #header-wrapper { border-bottom: none; } #sidebar ul li.visited \u0026gt; a .read-icon { color: var(--SIDE-MAIN-color); } a { color: var(--MAIN-LINK-color); } a:hover { color: var(--MAIN-HOVER-color); } body { background-color: var(--MAIN-BACK-color); color: var(--MAIN-TXT-color) !important; } #body a.highlight:after { background-color: var(--MAIN-HOVER-color); } #sidebar { background-color: var(--SIDE-MAIN-color); } #sidebar #header-wrapper { background: var(--SIDE-MAIN-color); color: var(--BF-color) border-color: var(--SIDE-FOCUS-BACK-color); } #sidebar .searchbox { border-color: var(--BF-color); background: var(--SIDE-FOCUS-BACK-color); } #sidebar ul.topics \u0026gt; li.parent, #sidebar ul.topics \u0026gt; li.active { background: var(--SIDE-FOCUS-BACK-color); } #sidebar .searchbox * { color: var(--SIDE-FOCUS-FORE-color); } #sidebar a , #sidebar a:hover { color: var(--MENU-LINK-color); } #sidebar .parent li, #sidebar .active li { border-color: var(--MENU-ACTIVE-LINK-color); } #sidebar ul li.active \u0026gt; a { background: var(--MENU-ACTIVE-BACK-color); color: var(--MENU-ACTIVE-LINK-color) !important; } #sidebar ul li .category-icon { color: var(--MENU-LINK-color); } #sidebar #shortcuts h3 { color: var(--SIDE-MAIN-TXT-color); } .footline { border-color: var(--SIDE-FOCUS-BACK-color); } div.block-header { color: #fff; padding-left: 1em; font-family: monospace; font-weight: bold; border-radius: 8px 8px 0 0; } div.block-header.fn { background-color: #4e3a82; } div.block-header.exec { background-color: #b93838; } div.block-header.example { background-color: #4d4b54; } .copy-to-clipboard { margin-top: -1px; } pre { border-radius: 0 0 8px 8px; } pre .copy-to-clipboard { background-color: #fff; border: 1px solid #272a2c !important; } pre .copy-to-clipboard:hover { background-color: #ffa; } div#tags { float: none; } div#breadcrumbs { width: calc(100% - 20px); } div#body-inner { max-width: 100ch; } div#body-inner pre { margin-top: 0; } #body .nav:hover { background-color: var(--NAV-HOVER-color); } Most syntax highlighting is done with Chroma, which is builtin to hugo. The site uses the perldoc theme:\nCreate in ~/git/rymcg.tech/blog/static/css/theme-rymcg.css /* perldoc syntax highlight style */ /* Background */ .chroma { background-color: #eeeedd } /* Error */ .chroma .err { color: #a61717; background-color: #e3d2d2 } /* LineHighlight */ .chroma .hl { background-color: #ffffcc; display: block; width: 100% } /* LineNumbers */ .chroma .ln { ; margin-right: 0.4em; padding: 0 0.4em 0 0.4em; } /* Keyword */ .chroma .k { color: #8b008b; font-weight: bold } /* KeywordConstant */ .chroma .kc { color: #8b008b; font-weight: bold } /* KeywordDeclaration */ .chroma .kd { color: #8b008b; font-weight: bold } /* KeywordNamespace */ .chroma .kn { color: #8b008b; font-weight: bold } /* KeywordPseudo */ .chroma .kp { color: #8b008b; font-weight: bold } /* KeywordReserved */ .chroma .kr { color: #8b008b; font-weight: bold } /* KeywordType */ .chroma .kt { color: #00688b; font-weight: bold } /* NameAttribute */ .chroma .na { color: #658b00 } /* NameBuiltin */ .chroma .nb { color: #658b00 } /* NameClass */ .chroma .nc { color: #008b45; font-weight: bold } /* NameConstant */ .chroma .no { color: #00688b } /* NameDecorator */ .chroma .nd { color: #707a7c } /* NameException */ .chroma .ne { color: #008b45; font-weight: bold } /* NameFunction */ .chroma .nf { color: #008b45 } /* NameNamespace */ .chroma .nn { color: #008b45 } /* NameTag */ .chroma .nt { color: #8b008b; font-weight: bold } /* NameVariable */ .chroma .nv { color: #00688b } /* LiteralString */ .chroma .s { color: #cd5555 } /* LiteralStringAffix */ .chroma .sa { color: #cd5555 } /* LiteralStringBacktick */ .chroma .sb { color: #cd5555 } /* LiteralStringChar */ .chroma .sc { color: #cd5555 } /* LiteralStringDelimiter */ .chroma .dl { color: #cd5555 } /* LiteralStringDoc */ .chroma .sd { color: #cd5555 } /* LiteralStringDouble */ .chroma .s2 { color: #cd5555 } /* LiteralStringEscape */ .chroma .se { color: #cd5555 } /* LiteralStringHeredoc */ .chroma .sh { color: #1c7e71; font-style: italic } /* LiteralStringInterpol */ .chroma .si { color: #cd5555 } /* LiteralStringOther */ .chroma .sx { color: #cb6c20 } /* LiteralStringRegex */ .chroma .sr { color: #1c7e71 } /* LiteralStringSingle */ .chroma .s1 { color: #cd5555 } /* LiteralStringSymbol */ .chroma .ss { color: #cd5555 } /* LiteralNumber */ .chroma .m { color: #b452cd } /* LiteralNumberBin */ .chroma .mb { color: #b452cd } /* LiteralNumberFloat */ .chroma .mf { color: #b452cd } /* LiteralNumberHex */ .chroma .mh { color: #b452cd } /* LiteralNumberInteger */ .chroma .mi { color: #b452cd } /* LiteralNumberIntegerLong */ .chroma .il { color: #b452cd } /* LiteralNumberOct */ .chroma .mo { color: #b452cd } /* OperatorWord */ .chroma .ow { color: #8b008b } /* Comment */ .chroma .c { color: #228b22 } /* CommentHashbang */ .chroma .ch { color: #228b22 } /* CommentMultiline */ .chroma .cm { color: #228b22 } /* CommentSingle */ .chroma .c1 { color: #228b22 } /* CommentSpecial */ .chroma .cs { color: #8b008b; font-weight: bold } /* CommentPreproc */ .chroma .cp { color: #1e889b } /* CommentPreprocFile */ .chroma .cpf { color: #1e889b } /* GenericDeleted */ .chroma .gd { color: #aa0000 } /* GenericEmph */ .chroma .ge { font-style: italic } /* GenericError */ .chroma .gr { color: #aa0000 } /* GenericHeading */ .chroma .gh { color: #000080; font-weight: bold } /* GenericInserted */ .chroma .gi { color: #00aa00 } /* GenericOutput */ .chroma .go { color: #888888 } /* GenericPrompt */ .chroma .gp { color: #555555 } /* GenericStrong */ .chroma .gs { font-weight: bold } /* GenericSubheading */ .chroma .gu { color: #800080; font-weight: bold } /* GenericTraceback */ .chroma .gt { color: #aa0000 } /* TextWhitespace */ .chroma .w { color: #bbbbbb } As a fallback, highlight.js is used for blocks that chroma can\u0026rsquo;t handle. Here\u0026rsquo;s a slight mod of the purebasic theme:\nCreate in ~/git/rymcg.tech/blog/static/css/hybrid.css .hljs { background: #eeeedd !important; display: block; overflow-x: auto; padding: 0.5em; } .hljs,.hljs-type,.hljs-function,.hljs-name,.hljs-number,.hljs-attr,.hljs-params,.hljs-subst { color: #000000; } .hljs-comment,.hljs-regexp,.hljs-section,.hljs-selector-pseudo,.hljs-addition { color: #00AAAA; } .hljs-title,.hljs-tag,.hljs-variable,.hljs-code { color: #006666; } .hljs-keyword,.hljs-class,.hljs-meta-keyword,.hljs-selector-class,.hljs-built_in,.hljs-builtin-name { color: #006666; font-weight: bold; } .hljs-string,.hljs-selector-attr { color: #0080FF; } .hljs-symbol,.hljs-link,.hljs-deletion,.hljs-attribute { color: #924B72; } .hljs-meta,.hljs-literal,.hljs-selector-id { color: #924B72; font-weight: bold; } .hljs-strong,.hljs-name { font-weight: bold; } .hljs-emphasis { font-style: italic; } Code block headers When reading code blocks in Org file source it\u0026rsquo;s pretty easy to see what file it\u0026rsquo;s referring to, by looking at the :tangle parameter:\nExample #+BEGIN_SRC emacs-lisp :tangle /some/path/example.el (messsage \u0026#34;example\u0026#34;) #+END_SRC But when this is exported to HTML, you don\u0026rsquo;t get to see the :tangle part, which means either the reader has to infer it from the context, or you need to add extra text to the document. The first form is confusing to the user reading in his web browser. The latter form means you\u0026rsquo;re repeating yourself, and when you refactor path names, you will have an additional thing you need to edit, or else an opportunity arises for the documentation to diverge from the code. Messy.\nLet\u0026rsquo;s automatically add headers to all the code blocks exported to HTML.\n Tangled code should have header with Create in $FILE Shell code blocks should have header with Run in $DIR Example blocks should have header with Example  Create in ~/.emacs.d/blog.el ; original credit to John Kitchin - https://stackoverflow.com/a/38876439/56560 (defun rymcg/org-hugo-add-tangle-names-to-export (backend) (let ((src-blocks (org-element-map (org-element-parse-buffer) \u0026#39;src-block #\u0026#39;identity))) (setq src-blocks (nreverse src-blocks)) (loop for src in src-blocks do (goto-char (org-element-property :begin src)) (let ((tangled-name (cdr (assoc :tangle (nth 2 (org-babel-get-src-block-info))))) (directory (cdr (assoc :dir (nth 2 (org-babel-get-src-block-info))))) (language-name (first (org-babel-get-src-block-info)))) (if (not (equal tangled-name \u0026#34;no\u0026#34;)) ; tangle files get a header for the file name: (insert (format \u0026#34;\\n#+HTML: \u0026lt;div class=\u0026#39;block-header fn\u0026#39;\u0026gt;Create in %s\u0026lt;/div\u0026gt;\\n\u0026#34; tangled-name)) (if (equal language-name \u0026#34;shell\u0026#34;) ; Non-tangled shell scripts get a header indicating to run it: ; Show the directory if it\u0026#39;s set: (insert (format \u0026#34;\\n#+HTML: \u0026lt;div class=\u0026#39;block-header exec\u0026#39;\u0026gt;Run%s\u0026lt;/div\u0026gt;\\n\u0026#34; (if (equal directory nil) \u0026#34;\u0026#34; (format \u0026#34; in %s\u0026#34; directory))))))))) (let ((example-blocks (org-element-map (org-element-parse-buffer) \u0026#39;example-block #\u0026#39;identity))) (setq example-blocks (nreverse example-blocks)) (loop for example in example-blocks do (goto-char (org-element-property :begin example)) (insert (format \u0026#34;\\n#+HTML: \u0026lt;div class=\u0026#39;block-header example\u0026#39;\u0026gt;Example\u0026lt;/div\u0026gt;\\n\u0026#34;))))) (defadvice org-hugo-export-subtree-to-md (around org-hugo-export-advice) (let ((org-export-before-processing-hook \u0026#39;(rymcg/org-hugo-add-tangle-names-to-export))) ad-do-it)) (ad-activate \u0026#39;org-hugo-export-subtree-to-md)"
},
{
	"uri": "https://blog.rymcg.tech/",
	"title": "Front Page",
	"tags": [],
	"description": "",
	"content": " Welcome This will eventually be a blog.\n"
},
{
	"uri": "https://blog.rymcg.tech/emacs/def-advice/",
	"title": "def-advice",
	"tags": [],
	"description": "",
	"content": "It\u0026rsquo;s cool..\n"
},
{
	"uri": "https://blog.rymcg.tech/emacs/emacs-post-2/",
	"title": "second emacs post",
	"tags": [],
	"description": "",
	"content": "Hi you gnu elpanizers\n"
},
{
	"uri": "https://blog.rymcg.tech/emacs/emacs-post-1/",
	"title": "first emacs post and a rather unfortunately long title that just goes on and on and on and on.",
	"tags": [],
	"description": "",
	"content": " Hi emacsers!\nSubheading 1 Subheading 2 "
},
{
	"uri": "https://blog.rymcg.tech/emacs/elips-tips/",
	"title": "elisp tips",
	"tags": [],
	"description": "",
	"content": "(message \u0026#34;Hi Emacsians!\u0026#34;)"
},
{
	"uri": "https://blog.rymcg.tech/book1/",
	"title": "Book",
	"tags": [],
	"description": "",
	"content": "Book 1 index.\nThis type of organization will generate this in the content/ directory:\nExample \u0026gt; tree book1 book1 ├── chapter1 │ ├── _index.md │ ├── section1.md │ └── section2.md ├── chapter2 │ ├── _index.md │ ├── section1.md │ └── section2.md └── _index.md  Chapter 1  Chapter 1 Section 1 Chapter 1 Section 2  Chapter 2  Chapter 2 Section 1 Chapter 2 Section 2   "
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter1/",
	"title": "Chapter 1 Index",
	"tags": [],
	"description": "",
	"content": "Introduction for chapter 1\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter2/",
	"title": "Chapter 2 Index",
	"tags": [],
	"description": "",
	"content": "Introduction for chapter 2\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter1/section1/",
	"title": "sub section 1",
	"tags": [],
	"description": "",
	"content": "Section 1 of chapter 1\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter2/section1/",
	"title": "sub section 1",
	"tags": [],
	"description": "",
	"content": "Section 1 of chapter 2\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter1/section2/",
	"title": "sub section 2",
	"tags": [],
	"description": "",
	"content": "Section 2 of chapter 1\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter2/section2/",
	"title": "sub section 2",
	"tags": [],
	"description": "",
	"content": "Section 2 of chapter 2\n"
},
{
	"uri": "https://blog.rymcg.tech/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "rymcg.tech\n"
},
{
	"uri": "https://blog.rymcg.tech/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.rymcg.tech/emacs/",
	"title": "Emacs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.rymcg.tech/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]