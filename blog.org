#+HUGO_BASE_DIR: hugo
#+HUGO_WEIGHT: auto
#+OPTIONS: broken-links:mark

* Make your own website like this
:PROPERTIES:
:EXPORT_HUGO_SECTION: ox-hugo
:END:
** Make your own website like this
:PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :END:
This is the source code for my website at [[https://blog.rymcg.tech][blog.rymcg.tech]], a
technology blog written in [[http://orgmode.org/][org-mode]], and published with [[https://github.com/kaushalmodi/ox-hugo/][ox-hugo]]. Every
page of the site is contained in [[https://raw.githubusercontent.com/enigmacurry/blog.rymcg.tech/master/blog.org][this Org file]]. If you're reading this
in a web browser, you are reading the literal documentation of the
website itself, describing all of its parts. If the website were to go
down, I could recreate it from scratch by executing the steps below.

This is a self-documenting deployment environment, using a literate
programming style written with [[http://org-babel.readthedocs.io][org-babel]] code blocks. You are free to
copy this file, or any portion of it, subject to the regular MIT
license.

*** Dependencies
My configuration consists of:

 - [[https://www.gnu.org/software/emacs/][Emacs]] 25
 - [[https://www.gnu.org/software/emacs/][Org Mode]] 9 from the [[http://orgmode.org/elpa.html][project repos]]
 - [[https://gohugo.io/][Hugo]] git:master (see script below)
 - [[https://raw.githubusercontent.com/enigmacurry/blog.rymcg.tech/master/blog.org][This Org file]]
  - The best, lay on the couch, and readable format is at http://blog.rymcg.tech/ox-hugo
  - If you want to hack on it, you can fork it at https://github.com/enigmacurry/blog.rymcg.tech
   - Github renders Org syntax, but not very well, so I don't recommend
     reading this on github.com.
  - Your development version is at http://localhost:1313
   - That is, it will be once you download this and try it out for
     yourself, in Emacs org-mode! 

** Licenses
:PROPERTIES:
:EXPORT_FILE_NAME: license
:END:
This software, and the contents of [[https://blog.rymcg.tech][blog.rymcg.tech]], are dual-licensed
under the [[https://creativecommons.org/licenses/by/4.0/][Creative Commons Attribution 4.0 License]], and the MIT
license. You may use either license at your sole discretion.

For example, you may want to choose [[https://creativecommons.org/licenses/by/4.0/][CC-by]] in order to copy an article
or section of this file to another blog or website, while [[https://github.com/enigmacurry/rymcg.tech/fork][forking this
project]] might be more suitable with the terms of the MIT license.

#+BEGIN_QUOTE
Copyright (c) 2017 EnigmaCurry - http://blog.rymcg.tech/ox-hugo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
#+END_QUOTE

The theme files distributed with the static HTML are licensed MIT. 

(If you use a different theme, you can remove this notice:)

#+BEGIN_QUOTE
Copyright (c) 2014 Grav 
Copyright (c) 2016 MATHIEU CORNIC 
Copyright (c) 2017 Valere JEANTET

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
#+END_QUOTE

** Configuration
:PROPERTIES:
:EXPORT_FILE_NAME: configuration
:END:
*** Environment
/*You need to change these settings according to your own environment:*/

Parts of this file will reference back to the following setting: 
**** Your local git checkout where you have blog.org:
#+NAME: blog-org-src
#+BEGIN_SRC txt
~/git/rymcg.tech
#+END_SRC

*** Install dev version of hugo
Currently I use the latest devolpment version of hugo, because I'm
waiting for recent bugfixes to make it into stable. Here is
[[https://gist.github.com/kaushalmodi/456b5ea26b3e869e5d63d4a67b85f676][kaushalmodi's script]] with a few tweaks. 

#+BEGIN_SRC shell :results none :noweb yes
# /home/kmodi/go.apps/src/github.com/gohugoio/hugo/README.md
# http://matthewkwilliams.com/index.php/2014/09/28/go-executables-are-statically-linked-except-when-they-are-not/

here=$(pwd)

hugo_src="github.com/gohugoio/hugo"
chroma_src="github.com/alecthomas/chroma"

export GOPATH=<<blog-org-src>>/hugo/go
mkdir -p $GOPATH
export CGO_ENABLED=0
export GO_EXTLINK_ENABLED=0

# https://discuss.gohugo.io/t/started-getting-failed-to-normalize-url-string-returning-in/5034/7?u=kaushalmodi
# Do govendor sync to prevent issues like this: https://github.com/gohugoio/hugo/issues/2919
if ! hash govendor 2>/dev/null
then
    go get -u -v github.com/kardianos/govendor
fi

# Install hugo for the first time so that the ${GOPATH}/src/${hugo_src}
# directory gets populated.
if [[ ! -d "${GOPATH}/src/${hugo_src}" ]] || ( ! hash hugo 2>/dev/null )
then
    go get -u -v ${hugo_src}
fi

# Update to hugo master branch
cd "${GOPATH}/src/${hugo_src}" || exit

git fetch --all # fetch new branch names if any
git checkout master
# git fetch --all
# Force update the vendor file in case it got changed
git reset --hard origin/master

# Synchronize all the dependent packages as per the just updated vendor file
govendor sync

# Update dependent packages from their master branches
# govendor fetch github.com/chaseadamsio/goorgeous
# govendor fetch github.com/chaseadamsio/goorgeous@=fixNewlineParagraphs

# Tue Sep 26 11:28:47 EDT 2017 - kmodi
# Turns out that the chroma package contains sub-packages too.. so have to
# include all separately.
# govendor fetch ${chroma_src}
# govendor fetch ${chroma_src}/formatters
# govendor fetch ${chroma_src}/formatters/html
# govendor fetch ${chroma_src}/lexers
# govendor fetch ${chroma_src}/styles

# https://discourse.gohugo.io/t/building-hugo-with-the-latest-version-of-chroma/8543/2?u=kaushalmodi
go get -u -v ${chroma_src}/...
# make vendor
rm -rf "${GOPATH}/src/${hugo_src}/vendor/${chroma_src}"

hugo_commithash=$(git rev-parse --short HEAD 2>/dev/null)
chroma_commithash=$(cd "${GOPATH}/src/${chroma_src}" && git rev-parse --short HEAD 2>/dev/null)
builddate=$(date +%FT%T%z)

go install -v \
   -ldflags "-X ${hugo_src}/hugolib.CommitHash=${hugo_commithash}:chroma-${chroma_commithash} \
             -X ${hugo_src}/hugolib.BuildDate=${builddate}" \
   ${hugo_src}

cd "${here}" || exit
 #+END_SRC

*** Install
 - Create a new git repository:
#+BEGIN_SRC shell :noweb yes
git init <<blog-org-src>>
#+END_SRC
 - Download [[https://raw.githubusercontent.com/EnigmaCurry/blog.rymcg.tech/master/blog.org][blog.org]] saving it to the new repository you created.
 - Use this code in your Emacs init file:
#+NAME: example-emacs-init
#+BEGIN_SRC emacs-lisp :noweb yes
;; Load blog.el which is tangled from blog.org:
(let ((blog-init (expand-file-name "<<blog-org-src>>/emacs/blog.el")))
  (if (file-exists-p blog-init)
    (load-file blog-init)))
#+END_SRC
 - (Don't worry, blog.el doesn't exist yet. See the next sections.)

*** Run!

These are the *manual* steps for building the website, directly from
org-mode. I know, this looks /a bit tedious/, but this should make it
easier to conceptualize all the individual steps. Later on, we'll
build up a script to automate all of this.

 - In Emacs, open up your copy of =blog.org=.
  - If you see a screen warning about local variables, hit =!= to
    accept them.
   - (This sets up ox-hugo to automatically rebuild the dev site when
     you save the file. See the hook at the very bottom of =blog.org=)
 - If you installed org-mode correctly, all should be true:
  - The file will open up in org-mode automatically, because it ends
    in =.org=.
  - You should see =Org= in the modeline.
  - =M-x org-version= should say something like 9.1 or higher.
 - Change the =blog-org-src= parameter in the Configuration section to
   where you made your git repository.
 - Modify the the config to your liking.
 - Save the file. It's yours now!
 - Tangle all the org-babel code blocks: 
  - (Tangle is org-babel lingo for: /save all code blocks marked with =:tangle= to the
    specified external file./)
  - Type =C-c C-v t= (or =M-x org-babel-tangle=)
  - This creates =emacs/blog.el= 
  - This creates =blog=, the hugo =config.yml=
    file, and a bunch of other files defined below.
 - *Restart Emacs* to reload the config. 
   - Packages will automatically download from [[https://melpa.org/#/][MELPA]] the first time
     it's loaded, so be patient. Watch for any errors in the
     =*Messages*= buffer.

 Steps to run each time you want to publish =blog.org=: 

 - Save any changes to =blog.org=
 - Run ox-hugo to export Org to markdown:
  - Type =C-c C-e H A= (or =C-1 M-x org-hugo-export-subtree-to-md=)
 - Optionally re-tangle config files, =C-c C-v t=
  - (You only really have to run this when you change blocks that have a
    =:tangle= parameter.)
 - Run the embedded hugo server:
  - Type =M-x hugo-server-start=.
  - The site should automatically open in your browser.
  - If you have a [[http://livereload.com/extensions/][live reload extension]] installed, the site should
    refresh automatically when you make changes.
  - Configure =browse-url-browser-function= if it opens in the wrong
    browser.
  - Sometimes the hugo server crashes, if it does, just run =M-x
    hugo-server-start= again.
 - Before final publish, run hugo to translate the markdown to the public html:
  - Type =M-x eshell-command RET bash -c 'cd hugo; ./go/bin/hugo'=
  - I was kidding, I don't type that.
  - I just open a terminal in the =hugo= directory and run
    =./go/bin/hugo=.
 - Transfer the =hugo/public= directory to your web host.

*Phew!*

Now that you went through all that, and you understand it, you have
graduated to using the *automated* script (yay!) Read the next section, and
then just run =M-x blog-publish= from now on. It will create a new
=public= branch, where it will build and publish HTML to
=hugo/public=. The =public= branch is ephemeral, it gets blown away
and created from scratch each time you run =M-x blog-publish=. Keep
your =blog.org= in the =master= branch. Keeping the HTML in a seperate
branch, keeps commits clean. Hosts like [[https://www.netlify.com/][netlify]] make it easy to
publish specific git branches and sub directories.

*** ox-hugo
This is the main config, it configures ox-hugo, initializes our hugo
directory, and sets up hugo server to run inside an Emacs eshell.

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle ./emacs/blog.el :noweb yes
(use-package ox-hugo
  :ensure t
  :after ox
  :init
  ;; set my/blog-root to the directory containing blog.org:
  (setq my/blog-root (expand-file-name "<<blog-org-src>>"))
  (setq my/blog-file (concat my/blog-root "/blog.org"))
  (setq my/hugo-root (concat my/blog-root "/hugo"))
  (setq my/hugo-bin (concat my/hugo-root "/go/bin/hugo"))
  (setq my/hugo-public-branch "public")
  (setq my/hugo-server-url "http://localhost:1313")

  ;; blog related functions defined inside of use-package' =:init= conveniently
  ;; dissappear from your system if the package install fails. So I kind of like that.
  (defun blog-init ()
    ;; Tangle all files:
    (org-babel-tangle-file my/blog-file)
    ;; Create theme files if necessary:
    ((lambda (filepath block-list)
       "Open an Org file and eval a list of named code blocks in it"
       (save-window-excursion
         (find-file filepath)
         (dolist (codeblock block-list)
           (org-babel-goto-named-src-block codeblock)
           (let ((org-confirm-babel-evaluate nil))
             (org-babel-execute-src-block-maybe)))))
     my/blog-file '("hugo-import-theme")))
  (blog-init)
  
  (defun blog-publish (keep-branch)
    "Build and publish the blog to the public branch.

    If keep-branch is non nil, make a new commit on an existing
    branch. Otherwise blog-publish will delete the old branch and
    create a new branch each time.

    I have no need to store the history of intermediary files, so I
    delete the public branch everytime I publish and the only
    commit in it is a snapshot of the current site. 

    If this site gets big, I may want to not do that, because
    I'll bet you get a lot more efficiency transferring a diff
    than you do the entire contents of the site."
    (interactive "P")
    (unless (equal (buffer-file-name (current-buffer)) my/blog-file)
      (error "You can only do that in the active buffer of the blog"))
    (unless (= 0 (call-process-shell-command 
                  "git diff-index --quiet HEAD --"))
      (error "You need to commit your changes before publishing."))
    (unless (= 0 (call-process-shell-command 
                  "[[ `git rev-parse --abbrev-ref HEAD` == \"master\" ]]"))
      (error "You need to start on the master branch"))
    (let ((default-directory my/blog-root))
      ;; Tangle all files:
      (org-babel-tangle-file my/blog-file)
      ;; Run ox-hugo to generate Markdown:
      (org-hugo-export-subtree-to-md 1)
      ;; Run hugo to generate HTML:
      (let ((default-directory my/hugo-root))
        (unless (= 0 (call-process-shell-command "./go/bin/hugo"))
          (error "hugo failed")))
      (if (not keep-branch)
          ;; Delete public branch:
          (call-process-shell-command (concat "git branch -D " 
                                              my/hugo-public-branch)))
      (if (/= 0 (call-process-shell-command 
                 (concat "git rev-parse --verify " my/hugo-public-branch)))
          (progn
            ;; Create a new branch in another dimension:
            (call-process-shell-command (concat "git checkout --orphan " 
                                                my/hugo-public-branch))
            ;; Get rid of the klingons:
            (call-process-shell-command "git rm --cached -r .") 
            ;; We only want to commit public site material:
            (call-process-shell-command (concat "echo -e '*\n"
                                                "!.gitignore\n"
                                                "!hugo/\n"
                                                "!hugo/public/\n"
                                                "!hugo/public/*\n"
                                                "!hugo/public/**/*\n"
                                                "' > .gitignore"))
            (call-process-shell-command "git add .gitignore")
            (call-process-shell-command "git commit -m 'initial static html setup'"))
        (unless (= 0 (call-process-shell-command (concat "git checkout " 
                                                         my/hugo-public-branch)))
          (error (concat "could not check out " my/hugo-public-branch " branch"))))
      ;; Commit static site files:
      (unless (= 0 (call-process-shell-command "git add hugo/public/* && git commit -m public"))
        (error "commit failed"))
      ;; Go back to master:
      (unless (= 0 (call-process-shell-command "git checkout master"))
        (error "could not switch back to master branch!"))
      ;; Push
      (message "git push ...")
      (unless (= 0 (call-process-shell-command (concat "git push -f origin " 
                                          my/hugo-public-branch)))
        (error "push failed"))
      (message "Yay!")))

  (defun hugo-server-start ()
    "Start hugo server in an inferior shell"
    (interactive)
    (let ((eshell-buffer-name (concat "*hugo-server-" my/hugo-root "*")))
      (if (bufferp (get-buffer eshell-buffer-name))
          (kill-buffer eshell-buffer-name))
      (eshell)
      (eshell-return-to-prompt)
      (insert (concat "cd " my/hugo-root))
      (eshell-send-input)
      (insert (concat my/hugo-bin " server -D --navigateToChanged"))
      (eshell-send-input)
      (browse-url my/hugo-server-url)
      (message eshell-buffer-name))))
#+END_SRC

*** Hugo site skeleton
Here's my main hugo config file:

#+BEGIN_SRC yml :tangle ./hugo/config.yml :eval no :mkdirp yes
baseURL: "https://blog.rymcg.tech/"
languageCode: "en-us"
DefaultContentLanguage: "en"

title: "rymcg.tech"
theme: "docdock"

pygmentsCodeFences: true
pygmentsUseClasses: true

params:
  noHomeIcon: true
  noSearch: false
  showVisitedLinks: true
  ordersectionsby: "weight"
  themeVariant: "rymcg"
  subTitle: "Technology by Ryan McGuire"
  
outputs:
  home:
    - HTML
    - RSS
    - JSON

mediaTypes:
  "text/plain":
    suffix: "org"
#+END_SRC

Create our site header:
#+BEGIN_SRC markdown :mkdirp yes :eval no :tangle ./hugo/content/_header.md
rymcg.tech
#+END_SRC

Import the theme:

#+NAME: hugo-import-theme
#+BEGIN_SRC shell :dir ./hugo :results none
if [ ! -d themes/docdock ]; then
    mkdir -p themes
    git submodule add -f https://github.com/EnigmaCurry/hugo-theme-docdock themes/docdock
fi
#+END_SRC

Customize the header for each page, include any [[https://gohugo.io/variables/page/][Hugo Page Variables]]:

#+BEGIN_SRC html :mkdirp yes :tangle ./hugo/layouts/partials/custom-post-header.html
<div id="post-meta">
{{if $.Param "draft"}}
   <div class="notices info">This page is an unpublished draft.</div>
{{end}}
   {{if $.Param "author"}} 
  Author: {{ $.Param "author"}}<br/>
{{end}}
{{if not .Date.IsZero}}
  Published: {{.Date.Format "January 1, 2006"}}
  {{if ne .Lastmod .Date}}(<b>last update: {{.Lastmod.Format "January 1, 2006"}}</b>){{end}}<br/>
{{end}}
</div>
#+END_SRC

Create our own theme variant:

#+BEGIN_SRC css :mkdirp yes :eval no :tangle ./hugo/static/css/theme-rymcg.css
:root{
    --MAIN-BACK-color:#ddd;
    --MAIN-TXT-color: #000;
    --MAIN-LINK-color:#3995b1;
    --MAIN-HOVER-color:#c51212;
    --SIDE-MAIN-color:#444;
    --SIDE-MAIN-TXT-color:#fff;
    --SIDE-FOCUS-BACK-color:#707070;
    --SIDE-FOCUS-FORE-color:black;
    --MENU-LINK-color:#fff;
    --MENU-ACTIVE-BACK-color:#505050;
    --MENU-ACTIVE-LINK-color:white;
    --NAV-HOVER-color:#bbb;
}
#header-wrapper {
    border-bottom: none;
}
#sidebar ul li.visited > a .read-icon {
	color: var(--SIDE-MAIN-color);
}
a {
    color: var(--MAIN-LINK-color);
}
a:hover {
    color: var(--MAIN-HOVER-color);
}
body {
    background-color: var(--MAIN-BACK-color);
    color: var(--MAIN-TXT-color) !important;
}
#body a.highlight:after {
    background-color: var(--MAIN-HOVER-color);
}
#sidebar {
	background-color: var(--SIDE-MAIN-color);
}
#sidebar #header-wrapper {
    background: var(--SIDE-MAIN-color);
    color: var(--BF-color)
    border-color: var(--SIDE-FOCUS-BACK-color);
}
#sidebar .searchbox {
	border-color: var(--BF-color);
    background: var(--SIDE-FOCUS-BACK-color);
}
#sidebar ul.topics > li.parent, #sidebar ul.topics > li.active {
    background: var(--SIDE-FOCUS-BACK-color);
}
#sidebar .searchbox * {
    color: var(--SIDE-FOCUS-FORE-color);
}
#sidebar a , #sidebar a:hover {
    color: var(--MENU-LINK-color);
}
#sidebar .parent li, #sidebar .active li {
    border-color: var(--MENU-ACTIVE-LINK-color);
}
#sidebar ul li.active > a {
    background: var(--MENU-ACTIVE-BACK-color);
    color: var(--MENU-ACTIVE-LINK-color) !important;
}
#sidebar ul li .category-icon {
	color: var(--MENU-LINK-color);
}
#sidebar #shortcuts h3 {
    color: var(--SIDE-MAIN-TXT-color);
}

.footline {
	border-color: var(--SIDE-FOCUS-BACK-color);
}

div.block-header {
    color: #fff;
    padding-left: 1em;
    font-family: monospace;
    font-weight: bold;
    border-radius: 8px 8px 0 0;
}
div.block-header {
    background-color: #4d4b54;
}
div.block-header.tangle {
    background-color: #4e3a82;    
}
div.block-header.exec {
    background-color: #b93838;    
}
.copy-to-clipboard {
    margin-top: -1px;
}
pre {
    border-radius: 0 0 8px 8px;
}
pre .copy-to-clipboard {
    background-color: #fff;
    border: 1px solid #272a2c !important;
}
pre .copy-to-clipboard:hover {
    background-color: #ffa;
}

div#tags {
    float: none;
}
div#breadcrumbs {
    width: calc(100% - 20px);
}
div#body-inner {
    max-width: 100ch;
}
div#body-inner h1 {
    margin-bottom: 0;
}
div#post-meta {
    font-size: 0.7em;
    font-family: sans-serif;
    margin-bottom: 3em;
}
div#body-inner pre {
    margin-top: 0;
}

#body .nav:hover {
    background-color: var(--NAV-HOVER-color);
}
#+END_SRC

Most syntax highlighting is done with Chroma, which is builtin to
hugo. The site uses the =perldoc= theme:

#+BEGIN_SRC css :tangle ./hugo/static/css/theme-rymcg.css
/* perldoc syntax highlight style */
/* Background */ .chroma { background-color: #eeeedd }
/* Error */ .chroma .err { color: #a61717; background-color: #e3d2d2 }
/* LineHighlight */ .chroma .hl { background-color: #ffffcc; display: block; width: 100% }
/* LineNumbers */ .chroma .ln { ; margin-right: 0.4em; padding: 0 0.4em 0 0.4em; }
/* Keyword */ .chroma .k { color: #8b008b; font-weight: bold }
/* KeywordConstant */ .chroma .kc { color: #8b008b; font-weight: bold }
/* KeywordDeclaration */ .chroma .kd { color: #8b008b; font-weight: bold }
/* KeywordNamespace */ .chroma .kn { color: #8b008b; font-weight: bold }
/* KeywordPseudo */ .chroma .kp { color: #8b008b; font-weight: bold }
/* KeywordReserved */ .chroma .kr { color: #8b008b; font-weight: bold }
/* KeywordType */ .chroma .kt { color: #00688b; font-weight: bold }
/* NameAttribute */ .chroma .na { color: #658b00 }
/* NameBuiltin */ .chroma .nb { color: #658b00 }
/* NameClass */ .chroma .nc { color: #008b45; font-weight: bold }
/* NameConstant */ .chroma .no { color: #00688b }
/* NameDecorator */ .chroma .nd { color: #707a7c }
/* NameException */ .chroma .ne { color: #008b45; font-weight: bold }
/* NameFunction */ .chroma .nf { color: #008b45 }
/* NameNamespace */ .chroma .nn { color: #008b45 }
/* NameTag */ .chroma .nt { color: #8b008b; font-weight: bold }
/* NameVariable */ .chroma .nv { color: #00688b }
/* LiteralString */ .chroma .s { color: #cd5555 }
/* LiteralStringAffix */ .chroma .sa { color: #cd5555 }
/* LiteralStringBacktick */ .chroma .sb { color: #cd5555 }
/* LiteralStringChar */ .chroma .sc { color: #cd5555 }
/* LiteralStringDelimiter */ .chroma .dl { color: #cd5555 }
/* LiteralStringDoc */ .chroma .sd { color: #cd5555 }
/* LiteralStringDouble */ .chroma .s2 { color: #cd5555 }
/* LiteralStringEscape */ .chroma .se { color: #cd5555 }
/* LiteralStringHeredoc */ .chroma .sh { color: #1c7e71; font-style: italic }
/* LiteralStringInterpol */ .chroma .si { color: #cd5555 }
/* LiteralStringOther */ .chroma .sx { color: #cb6c20 }
/* LiteralStringRegex */ .chroma .sr { color: #1c7e71 }
/* LiteralStringSingle */ .chroma .s1 { color: #cd5555 }
/* LiteralStringSymbol */ .chroma .ss { color: #cd5555 }
/* LiteralNumber */ .chroma .m { color: #b452cd }
/* LiteralNumberBin */ .chroma .mb { color: #b452cd }
/* LiteralNumberFloat */ .chroma .mf { color: #b452cd }
/* LiteralNumberHex */ .chroma .mh { color: #b452cd }
/* LiteralNumberInteger */ .chroma .mi { color: #b452cd }
/* LiteralNumberIntegerLong */ .chroma .il { color: #b452cd }
/* LiteralNumberOct */ .chroma .mo { color: #b452cd }
/* OperatorWord */ .chroma .ow { color: #8b008b }
/* Comment */ .chroma .c { color: #228b22 }
/* CommentHashbang */ .chroma .ch { color: #228b22 }
/* CommentMultiline */ .chroma .cm { color: #228b22 }
/* CommentSingle */ .chroma .c1 { color: #228b22 }
/* CommentSpecial */ .chroma .cs { color: #8b008b; font-weight: bold }
/* CommentPreproc */ .chroma .cp { color: #1e889b }
/* CommentPreprocFile */ .chroma .cpf { color: #1e889b }
/* GenericDeleted */ .chroma .gd { color: #aa0000 }
/* GenericEmph */ .chroma .ge { font-style: italic }
/* GenericError */ .chroma .gr { color: #aa0000 }
/* GenericHeading */ .chroma .gh { color: #000080; font-weight: bold }
/* GenericInserted */ .chroma .gi { color: #00aa00 }
/* GenericOutput */ .chroma .go { color: #888888 }
/* GenericPrompt */ .chroma .gp { color: #555555 }
/* GenericStrong */ .chroma .gs { font-weight: bold }
/* GenericSubheading */ .chroma .gu { color: #800080; font-weight: bold }
/* GenericTraceback */ .chroma .gt { color: #aa0000 }
/* TextWhitespace */ .chroma .w { color: #bbbbbb }
#+END_SRC

As a fallback, highlight.js is used for blocks that chroma can't
handle. Here's a slight mod of the =purebasic= theme:

#+BEGIN_SRC css :tangle ./hugo/static/css/hybrid.css
.hljs {
	background: #eeeedd !important;
	display: block;
	overflow-x: auto;
	padding: 0.5em;
}
.hljs,.hljs-type,.hljs-function,.hljs-name,.hljs-number,.hljs-attr,.hljs-params,.hljs-subst {
	color: #000000;
}
.hljs-comment,.hljs-regexp,.hljs-section,.hljs-selector-pseudo,.hljs-addition {
	color: #00AAAA;
}
.hljs-title,.hljs-tag,.hljs-variable,.hljs-code {
	color: #006666;
}
.hljs-keyword,.hljs-class,.hljs-meta-keyword,.hljs-selector-class,.hljs-built_in,.hljs-builtin-name {
	color: #006666;
	font-weight: bold;
}
.hljs-string,.hljs-selector-attr {
	color: #0080FF;
}
.hljs-symbol,.hljs-link,.hljs-deletion,.hljs-attribute {
	color: #924B72;
}
.hljs-meta,.hljs-literal,.hljs-selector-id {
	color: #924B72;
	font-weight: bold;
}
.hljs-strong,.hljs-name {
	font-weight: bold;
}
.hljs-emphasis {
	font-style: italic;
}
#+END_SRC

*** Code block headers
When reading code blocks in Org file source it's pretty easy to see
what file it's referring to, by looking at the =:tangle= parameter:

#+BEGIN_EXAMPLE org
#+BEGIN_SRC emacs-lisp :tangle /some/path/example.el
  (messsage "example")
#+END_SRC
#+END_EXAMPLE

But when this is exported to HTML, you don't get to see the =:tangle=
part, which means either the reader has to infer it from the context,
or you need to add extra text to the document. The first form is
confusing to the user reading in his web browser. The latter form
means you're repeating yourself, and when you refactor path names, you
will have an additional thing you need to edit, or else an opportunity
arises for the documentation to diverge from the code. Messy.
 
Let's automatically add headers to all the code blocks exported to
HTML.

 - Tangled code should have header with =Create in $FILE=
 - Shell code blocks should have header with =Run in $DIR= 
 - Example blocks should have header with =Example= 

#+BEGIN_SRC emacs-lisp :tangle ./emacs/blog.el
;; original credit to John Kitchin - https://stackoverflow.com/a/38876439/56560
(defun rymcg/org-hugo-export-block-headers (backend)
  (let ((src-blocks (org-element-map (org-element-parse-buffer) 'src-block #'identity)))
    (setq src-blocks (nreverse src-blocks))
    (loop for src in src-blocks
          do
          (goto-char (org-element-property :begin src))
          (let ((tangle (cdr (assoc :tangle (nth 2 (org-babel-get-src-block-info)))))
                (directory (cdr (assoc :dir (nth 2 (org-babel-get-src-block-info)))))
                (language-name (first (org-babel-get-src-block-info)))
                (block-name (nth 4 (org-babel-get-src-block-info))))
            (let ((shell-block? (equal language-name "shell"))
                  (tangle-block? (not (equal tangle "no"))))
              (let ((block-name-fmt (if block-name (format "%s<br/>" block-name) ""))
                    (html-class (cond (tangle-block? "block-header tangle")
                                      (shell-block? "block-header exec")
                                      ("block-header")))
                    (header-txt (cond (tangle-block? (format "Create in %s" tangle))
                                      (shell-block? 
                                       (concat "Run" (if directory 
                                                         (format " in %s" directory) "")))
                                      ((not block-name) "&nbsp;")
                                      (""))))
                (insert (format "\n#+HTML: <div class='%s'>%s%s</div>\n" html-class 
                                block-name-fmt header-txt)))))))

  (let ((ex-blocks (org-element-map (org-element-parse-buffer) 'example-block #'identity)))
    (setq ex-blocks (nreverse ex-blocks))
    (loop for ex in ex-blocks
          do
          (goto-char (org-element-property :begin ex))
          (insert (format "\n#+HTML: <div class='block-header example'>Example</div>\n")))))

(defadvice org-hugo-export-subtree-to-md (around org-hugo-export-advice)
  (let ((org-export-before-processing-hook '(rymcg/org-hugo-export-block-headers)))
    ad-do-it))
(ad-activate 'org-hugo-export-subtree-to-md)
#+END_SRC

#+RESULTS:
: org-hugo-export-subtree-to-md

*** RSS
Hugo ships with it's own [[https://gohugo.io/templates/rss/#the-embedded-rss-xml][RSS template]], but let's create our own:

 - Only include the 30 most recent entries.
 - Display in reverse chronological order.
 - Include any pages that have a date, /including =_index= pages/.
  - The date must be set in the front matter params, by ox-hugo.

#+BEGIN_SRC xml :mkdirp yes :tangle ./hugo/layouts/rss.xml
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>{{ .Site.Title }}</title>
    <link>{{ .Permalink }}</link>
    <description>Recent content on {{ .Site.Title }}</description>
    <generator>Hugo -- gohugo.io</generator> {{ with .Site.LanguageCode }}
    <language>{{.}}</language> {{end}} {{ with .Site.Copyright }}
    <copyright>{{.}}</copyright> {{end}} {{ if not .Date.IsZero }}
    <lastBuildDate>{{ .Date.Format "Mon, 02 Jan 2006 15:04:05 -0700" | safeHTML }}</lastBuildDate>{{ end }}
    {{ range first 30 (where .Site.AllPages.ByDate.Reverse "Params.date" "!=" nil) }} <item>
        <title>{{ .Title }}</title>
        <link>{{ .Permalink }}</link>
        <pubDate>{{ .Date.Format "Mon, 02 Jan 2006 15:04:05 -0700" | safeHTML }}</pubDate> {{ with .Site.Author.email }}
        <author>{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}</author>{{end}}
        <guid>{{ .Permalink }}</guid>
        <description>{{ .Summary | html }}</description>
      </item>{{ end }}
  </channel>
</rss>
 #+END_SRC

Add a link to the RSS in the page head:

#+BEGIN_SRC html :tangle ./hugo/layouts/partials/custom-head.html
{{ if .RSSLink }}
  <link href="{{ .RSSLink }}" rel="alternate" type="application/rss+xml" title="{{ .Site.Title }}" />
{{ end }}
#+END_SRC
** Creating content
:PROPERTIES:
:EXPORT_FILE_NAME: creating-content
:END:
*** Linking to static files

Put your images in =./hugo/static/images=

Test: [[/images/lolwut.png]]

{{% notice info %}}
Each static directory needs to be whitelisted in =.gitignore= (already done for images subdir.)
{{% /notice %}}

*** Half baked ideas
**** Export the output of code blocks and timestamp of last run

 #+BEGIN_SRC emacs-lisp :tangle ./emacs/blog.el
(defadvice org-babel-insert-result (after org-babel-record-result-timestamp)
  (let ((code-block-params (nth 2 (org-babel-get-src-block-info)))
        (block-name (nth 4 (org-babel-get-src-block-info))))
    (let ((timestamp (cdr (assoc :timestamp code-block-params)))
          (result-params (assoc :result-params code-block-params)))
      (if (and (equal timestamp "t") 
               (> (length block-name) 0)
               (member "html" result-params))
          (save-excursion
            (goto-char (point-min))
            (search-forward-regexp (concat "^\w*#\\+RESULTS: " 
                                           block-name 
                                           "\n\w*#\\+BEGIN_EXPORT html\n"))
            (let ((beg (point)))
              (search-forward-regexp "^\w*#\\+END_EXPORT")
              (beginning-of-line)
              (kill-region beg (point)))
            (insert (format (concat "<div class=\"block-header results\">"
                                    block-name
                                    " - Last run: %s</div>\n")
                            (format-time-string "%F %r")))
            (insert (format (concat "<div class=\"block-results\" "
                                    "id=\"results-%s\"><pre class=\"chroma\">\n") 
                            block-name))
            (yank)
            (insert "</pre></div>\n"))
        (if (equal timestamp "t")
            (message (concat "Result timestamping requires a #+NAME: "
                             "and a ':results html' argument.")))))))
(ad-activate 'org-babel-insert-result)
 #+END_SRC

Output requires the code block to have all these parameters:

 - =#+NAME:=
   - A unique name for the code block ensures that the correct result
     block will be updated.
 - =:timestamp t=
  - Turns on the timestamp
 - =:exports both= 
  - Exports both the code block itself, and it's output, to HTML.
 - =:results html= 
  - Formats the result as HTML.
 - =:eval never-export= 
  - (Optional) Makes it so the block is *not* automatically evaluated
    on export. It has to be manually run.

#+NAME: testguy
#+BEGIN_SRC shell :results html :exports both :eval never-export :timestamp t
whoami
ls
#+END_SRC

Results and timestamp are exported to HTML each time the block is re-evaluated:

#+RESULTS: testguy
#+BEGIN_EXPORT html
<div class="block-header results">testguy - Last run: 2017-10-03 06:38:02 PM</div>
<div class="block-results" id="results-testguy"><pre class="chroma">
ryan
blog
blog.org
</pre></div>
#+END_EXPORT

** Review
:PROPERTIES:
:EXPORT_FILE_NAME: review
:END:
OK, so having read this far, I'm expecting that you now have a bit of
an environment setup. You're not just reading this in a web browser,
you've got Emacs open on one half of your screen, and a web browser on
the other viewing this site. You can see the source, save any changes,
and they livereload on your browser instantly. Nice! 

Now you have your own thing going. You can delete all the rest of this
file. Make sure you keep all of this first section, it is now /your/
documentation for /your/ site. You are now a nomad, a wayfaring hacker,
surviving the wastelands of NullDevia, and rebuilding anew! But
only if you keep the instructions in this section, you'll need those!

The rest of this file you can delete, or keep as a reference, but my
narrative becomes your narrative, so edit it however you feel like.

The [[Local Variables]] section includes important Emacs configuration
parameters to setup this file for the live reload feature, so maybe
keep that.

* Front Page
:PROPERTIES:
:TITLE: rymcg.tech
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: _index
:END:
** Welcome
This will eventually be a blog.

* Org-babel tests                            :orgmode:
:PROPERTIES:
:EXPORT_HUGO_SECTION: org-babel
:EXPORT_FILE_NAME: _index
:EXPORT_DATE: <2017-10-09 Mon>
:EXPORT_HUGO_LASTMOD: <2017-11-09 Thu>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases asdf2z,asdf
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :author EnigmaCurry
:END:
These are org-babel experiments

** Subsection parameters
:PROPERTIES:
:header-args: :dir /home/ryan
:END:

* Emacs
:PROPERTIES:
:EXPORT_HUGO_SECTION: emacs
:END:
The source for [[https://rymcg.tech/emacs]]

** def-advice
:PROPERTIES:
:EXPORT_FILE_NAME: def-advice
:END:

It's cool..

** second emacs post
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-post-2
:END:

Hi you gnu elpanizers

** first emacs post and a rather unfortunately long title that just goes on and on and on and on.
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-post-1
:END:

Hi emacsers!

*** Subheading 1

*** Subheading 2
** elisp tips
:PROPERTIES:
:EXPORT_FILE_NAME: elips-tips
:END:

#+BEGIN_SRC emacs_lisp
(message "Hi Emacsians!")
#+END_SRC

* Books
** book1
:PROPERTIES:
:EXPORT_HUGO_SECTION: book1
:END:
*** Book
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
Book 1 index.

This type of organization will generate this in the =content/=
directory:
#+BEGIN_EXAMPLE
> tree book1
book1
├── chapter1
│   ├── _index.md
│   ├── section1.md
│   └── section2.md
├── chapter2
│   ├── _index.md
│   ├── section1.md
│   └── section2.md
└── _index.md
#+END_EXAMPLE

- [[/book1/chapter1][Chapter 1]]
  - [[/book1/chapter1/section1][Chapter 1 Section 1]]
  - [[/book1/chapter1/section2][Chapter 1 Section 2]]
- [[/book1/chapter2][Chapter 2]]
  - [[/book1/chapter2/section1][Chapter 2 Section 1]]
  - [[/book1/chapter2/section2][Chapter 2 Section 2]]
*** chapter 1
:PROPERTIES:
:EXPORT_HUGO_SECTION: book1/chapter1
:END:
**** Chapter 1 Index
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
Introduction for chapter 1
**** sub section 1
:PROPERTIES:
:EXPORT_FILE_NAME: section1
:END:
Section 1 of chapter 1
**** sub section 2
:PROPERTIES:
:EXPORT_FILE_NAME: section2
:END:
Section 2 of chapter 1
*** chapter 2
:PROPERTIES:
:EXPORT_HUGO_SECTION: book1/chapter2
:END:
**** Chapter 2 Index
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
Introduction for chapter 2
**** sub section 1
:PROPERTIES:
:EXPORT_FILE_NAME: section1
:END:
Section 1 of chapter 2
**** sub section 2
:PROPERTIES:
:EXPORT_FILE_NAME: section2
:END:
Section 2 of chapter 2
* Footnotes
* COMMENT Local Variables                    :ARCHIVE:
# Local Variables:
# fill-column: 70
# eval: (auto-fill-mode 1)
# eval: (toggle-truncate-lines 1)
# eval: (add-hook 'after-save-hook #'org-hugo-export-subtree-to-md-after-save :append :local)
# End:
