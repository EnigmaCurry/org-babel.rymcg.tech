[
{
	"uri": "https://blog.rymcg.tech/",
	"title": "Front Page",
	"tags": [],
	"description": "",
	"content": " Welcome This will eventually be a blog.\n"
},
{
	"uri": "https://blog.rymcg.tech/org-babel/",
	"title": "Org-babel tests",
	"tags": ["orgmode"],
	"description": "",
	"content": " These are org-babel experiments\nSubsection parameters "
},
{
	"uri": "https://blog.rymcg.tech/ox-hugo/",
	"title": "Make your own website like this",
	"tags": [],
	"description": "",
	"content": " This is the source code for my website at blog.rymcg.tech, a technology blog written in org-mode, and published with ox-hugo. Every page of the site is contained in this Org file. If you\u0026rsquo;re reading this in a web browser, you are reading the literal documentation of the website itself, describing all of its parts. If the website were to go down, I could recreate it from scratch by executing the steps below.\nThis is a self-documenting deployment environment, using a literate programming style written with org-babel code blocks. You are free to copy this file, or any portion of it, subject to the regular MIT license.\nDependencies My configuration consists of:\n Emacs 25 Org Mode 9 from the project repos Hugo git:master (see script below) This Org file  The best, lay on the couch, and readable format is at http://blog.rymcg.tech/ox-hugo If you want to hack on it, you can fork it at https://github.com/enigmacurry/blog.rymcg.tech  Github renders Org syntax, but not very well, so I don\u0026rsquo;t recommend reading this on github.com.  Your development version is at http://localhost:1313  That is, it will be once you download this and try it out for yourself, in Emacs org-mode!    "
},
{
	"uri": "https://blog.rymcg.tech/emacs/def-advice/",
	"title": "def-advice",
	"tags": [],
	"description": "",
	"content": "It\u0026rsquo;s cool..\n"
},
{
	"uri": "https://blog.rymcg.tech/emacs/emacs-post-2/",
	"title": "second emacs post",
	"tags": [],
	"description": "",
	"content": "Hi you gnu elpanizers\n"
},
{
	"uri": "https://blog.rymcg.tech/ox-hugo/license/",
	"title": "Licenses",
	"tags": [],
	"description": "",
	"content": "This software, and the contents of blog.rymcg.tech, are dual-licensed under the Creative Commons Attribution 4.0 License, and the MIT license. You may use either license at your sole discretion.\nFor example, you may want to choose CC-by in order to copy an article or section of this file to another blog or website, while forking this project might be more suitable with the terms of the MIT license.\n Copyright \u0026copy; 2017 EnigmaCurry - http://blog.rymcg.tech/ox-hugo\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026ldquo;Software\u0026rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \u0026ldquo;AS IS\u0026rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n The theme files distributed with the static HTML are licensed MIT.\n(If you use a different theme, you can remove this notice:)\n Copyright \u0026copy; 2014 Grav Copyright \u0026copy; 2016 MATHIEU CORNIC Copyright \u0026copy; 2017 Valere JEANTET\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026ldquo;Software\u0026rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \u0026ldquo;AS IS\u0026rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n "
},
{
	"uri": "https://blog.rymcg.tech/ox-hugo/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Environment You need to change these settings according to your own environment:\nParts of this file will reference back to the following setting:\nYour local git checkout where you have blog.org: blog-org-src ~/git/rymcg.tech Install dev version of hugo Currently I use the latest devolpment version of hugo, because I\u0026rsquo;m waiting for recent bugfixes to make it into stable. Here is kaushalmodi\u0026rsquo;s script with a few tweaks.\nRun # /home/kmodi/go.apps/src/github.com/gohugoio/hugo/README.md # http://matthewkwilliams.com/index.php/2014/09/28/go-executables-are-statically-linked-except-when-they-are-not/  here=$(pwd) hugo_src=\u0026#34;github.com/gohugoio/hugo\u0026#34; chroma_src=\u0026#34;github.com/alecthomas/chroma\u0026#34; export GOPATH=~/git/rymcg.tech/hugo/go mkdir -p $GOPATH export CGO_ENABLED=0 export GO_EXTLINK_ENABLED=0 # https://discuss.gohugo.io/t/started-getting-failed-to-normalize-url-string-returning-in/5034/7?u=kaushalmodi # Do govendor sync to prevent issues like this: https://github.com/gohugoio/hugo/issues/2919 if ! hash govendor 2\u0026gt;/dev/null then go get -u -v github.com/kardianos/govendor fi # Install hugo for the first time so that the ${GOPATH}/src/${hugo_src} # directory gets populated. if [[ ! -d \u0026#34;${GOPATH}/src/${hugo_src}\u0026#34; ]] || ( ! hash hugo 2\u0026gt;/dev/null ) then go get -u -v ${hugo_src} fi # Update to hugo master branch cd \u0026#34;${GOPATH}/src/${hugo_src}\u0026#34; || exit git fetch --all # fetch new branch names if any git checkout master # git fetch --all # Force update the vendor file in case it got changed git reset --hard origin/master # Synchronize all the dependent packages as per the just updated vendor file govendor sync # Update dependent packages from their master branches # govendor fetch github.com/chaseadamsio/goorgeous # govendor fetch github.com/chaseadamsio/goorgeous@=fixNewlineParagraphs  # Tue Sep 26 11:28:47 EDT 2017 - kmodi # Turns out that the chroma package contains sub-packages too.. so have to # include all separately. # govendor fetch ${chroma_src} # govendor fetch ${chroma_src}/formatters # govendor fetch ${chroma_src}/formatters/html # govendor fetch ${chroma_src}/lexers # govendor fetch ${chroma_src}/styles  # https://discourse.gohugo.io/t/building-hugo-with-the-latest-version-of-chroma/8543/2?u=kaushalmodi go get -u -v ${chroma_src}/... # make vendor rm -rf \u0026#34;${GOPATH}/src/${hugo_src}/vendor/${chroma_src}\u0026#34; hugo_commithash=$(git rev-parse --short HEAD 2\u0026gt;/dev/null) chroma_commithash=$(cd \u0026#34;${GOPATH}/src/${chroma_src}\u0026#34; \u0026amp;\u0026amp; git rev-parse --short HEAD 2\u0026gt;/dev/null) builddate=$(date +%FT%T%z) go install -v \\  -ldflags \u0026#34;-X ${hugo_src}/hugolib.CommitHash=${hugo_commithash}:chroma-${chroma_commithash}\\ -X ${hugo_src}/hugolib.BuildDate=${builddate}\u0026#34; \\  ${hugo_src} cd \u0026#34;${here}\u0026#34; || exit Install  Create a new git repository:  Run git init ~/git/rymcg.tech  Download blog.org saving it to the new repository you created. Use this code in your Emacs init file:  example-emacs-init ;; Load blog.el which is tangled from blog.org: (let ((blog-init (expand-file-name \u0026#34;~/git/rymcg.tech/emacs/blog.el\u0026#34;))) (if (file-exists-p blog-init) (load-file blog-init)))  (Don\u0026rsquo;t worry, blog.el doesn\u0026rsquo;t exist yet. See the next sections.)  Run! These are the manual steps for building the website, directly from org-mode. I know, this looks a bit tedious, but this should make it easier to conceptualize all the individual steps. Later on, we\u0026rsquo;ll build up a script to automate all of this.\n In Emacs, open up your copy of blog.org.  If you see a screen warning about local variables, hit ! to accept them.  (This sets up ox-hugo to automatically rebuild the dev site when you save the file. See the hook at the very bottom of blog.org)   If you installed org-mode correctly, all should be true:  The file will open up in org-mode automatically, because it ends in .org. You should see Org in the modeline. M-x org-version should say something like 9.1 or higher.  Change the blog-org-src parameter in the Configuration section to where you made your git repository. Modify the the config to your liking. Save the file. It\u0026rsquo;s yours now! Tangle all the org-babel code blocks:  (Tangle is org-babel lingo for: save all code blocks marked with :tangle to the specified external file.) Type C-c C-v t (or M-x org-babel-tangle) This creates emacs/blog.el This creates blog, the hugo config.yml file, and a bunch of other files defined below.  Restart Emacs to reload the config.  Packages will automatically download from MELPA the first time it\u0026rsquo;s loaded, so be patient. Watch for any errors in the *Messages* buffer.   Steps to run each time you want to publish blog.org:\n Save any changes to blog.org Run ox-hugo to export Org to markdown:  Type C-c C-e H A (or C-1 M-x org-hugo-export-subtree-to-md)  Optionally re-tangle config files, C-c C-v t  (You only really have to run this when you change blocks that have a :tangle parameter.)  Run the embedded hugo server:  Type M-x hugo-server-start. The site should automatically open in your browser. If you have a live reload extension installed, the site should refresh automatically when you make changes. Configure browse-url-browser-function if it opens in the wrong browser. Sometimes the hugo server crashes, if it does, just run M-x hugo-server-start again.  Before final publish, run hugo to translate the markdown to the public html:  Type M-x eshell-command RET bash -c 'cd hugo; ./go/bin/hugo' I was kidding, I don\u0026rsquo;t type that. I just open a terminal in the hugo directory and run ./go/bin/hugo.  Transfer the hugo/public directory to your web host.  Phew!\nNow that you went through all that, and you understand it, you have graduated to using the automated script (yay!) Read the next section, and then just run M-x blog-publish from now on. It will create a new public branch, where it will build and publish HTML to hugo/public. The public branch is ephemeral, it gets blown away and created from scratch each time you run M-x blog-publish. Keep your blog.org in the master branch. Keeping the HTML in a seperate branch, keeps commits clean. Hosts like netlify make it easy to publish specific git branches and sub directories.\nox-hugo This is the main config, it configures ox-hugo, initializes our hugo directory, and sets up hugo server to run inside an Emacs eshell.\nCreate in ./emacs/blog.el (use-package ox-hugo :ensure t :after ox :init ;; set my/blog-root to the directory containing blog.org: (setq my/blog-root (expand-file-name \u0026#34;~/git/rymcg.tech\u0026#34;)) (setq my/blog-file (concat my/blog-root \u0026#34;/blog.org\u0026#34;)) (setq my/hugo-root (concat my/blog-root \u0026#34;/hugo\u0026#34;)) (setq my/hugo-bin (concat my/hugo-root \u0026#34;/go/bin/hugo\u0026#34;)) (setq my/hugo-public-branch \u0026#34;public\u0026#34;) (setq my/hugo-server-url \u0026#34;http://localhost:1313\u0026#34;) ;; blog related functions defined inside of use-package\u0026#39; =:init= conveniently ;; dissappear from your system if the package install fails. So I kind of like that. (defun blog-init () ;; Tangle all files: (org-babel-tangle-file my/blog-file) ;; Create theme files if necessary: ((lambda (filepath block-list) \u0026#34;Open an Org file and eval a list of named code blocks in it\u0026#34; (save-window-excursion (find-file filepath) (dolist (codeblock block-list) (org-babel-goto-named-src-block codeblock) (let ((org-confirm-babel-evaluate nil)) (org-babel-execute-src-block-maybe))))) my/blog-file \u0026#39;(\u0026#34;hugo-import-theme\u0026#34;))) (blog-init) (defun blog-publish (keep-branch) \u0026#34;Build and publish the blog to the public branch. If keep-branch is non nil, make a new commit on an existing branch. Otherwise blog-publish will delete the old branch and create a new branch each time. I have no need to store the history of intermediary files, so I delete the public branch everytime I publish and the only commit in it is a snapshot of the current site. If this site gets big, I may want to not do that, because I\u0026#39;ll bet you get a lot more efficiency transferring a diff than you do the entire contents of the site.\u0026#34; (interactive \u0026#34;P\u0026#34;) (unless (equal (buffer-file-name (current-buffer)) my/blog-file) (error \u0026#34;You can only do that in the active buffer of the blog\u0026#34;)) (unless (= 0 (call-process-shell-command \u0026#34;git diff-index --quiet HEAD --\u0026#34;)) (error \u0026#34;You need to commit your changes before publishing.\u0026#34;)) (unless (= 0 (call-process-shell-command \u0026#34;[[ `git rev-parse --abbrev-ref HEAD` == \\\u0026#34;master\\\u0026#34; ]]\u0026#34;)) (error \u0026#34;You need to start on the master branch\u0026#34;)) (let ((default-directory my/blog-root)) ;; Tangle all files: (org-babel-tangle-file my/blog-file) ;; Run ox-hugo to generate Markdown: (org-hugo-export-subtree-to-md 1) ;; Run hugo to generate HTML: (let ((default-directory my/hugo-root)) (unless (= 0 (call-process-shell-command \u0026#34;./go/bin/hugo\u0026#34;)) (error \u0026#34;hugo failed\u0026#34;))) (if (not keep-branch) ;; Delete public branch: (call-process-shell-command (concat \u0026#34;git branch -D \u0026#34; my/hugo-public-branch))) (if (/= 0 (call-process-shell-command (concat \u0026#34;git rev-parse --verify \u0026#34; my/hugo-public-branch))) (progn ;; Create a new branch in another dimension: (call-process-shell-command (concat \u0026#34;git checkout --orphan \u0026#34; my/hugo-public-branch)) ;; Get rid of the klingons: (call-process-shell-command \u0026#34;git rm --cached -r .\u0026#34;) ;; We only want to commit public site material: (call-process-shell-command (concat \u0026#34;echo -e \u0026#39;*\\n\u0026#34; \u0026#34;!.gitignore\\n\u0026#34; \u0026#34;!hugo/\\n\u0026#34; \u0026#34;!hugo/public/\\n\u0026#34; \u0026#34;!hugo/public/*\\n\u0026#34; \u0026#34;!hugo/public/**/*\\n\u0026#34; \u0026#34;\u0026#39; \u0026gt; .gitignore\u0026#34;)) (call-process-shell-command \u0026#34;git add .gitignore\u0026#34;) (call-process-shell-command \u0026#34;git commit -m \u0026#39;initial static html setup\u0026#39;\u0026#34;)) (unless (= 0 (call-process-shell-command (concat \u0026#34;git checkout \u0026#34; my/hugo-public-branch))) (error (concat \u0026#34;could not check out \u0026#34; my/hugo-public-branch \u0026#34; branch\u0026#34;)))) ;; Commit static site files: (unless (= 0 (call-process-shell-command \u0026#34;git add hugo/public/* \u0026amp;\u0026amp; git commit -m public\u0026#34;)) (error \u0026#34;commit failed\u0026#34;)) ;; Go back to master: (unless (= 0 (call-process-shell-command \u0026#34;git checkout master\u0026#34;)) (error \u0026#34;could not switch back to master branch!\u0026#34;)) ;; Push (message \u0026#34;git push ...\u0026#34;) (unless (= 0 (call-process-shell-command (concat \u0026#34;git push -f origin \u0026#34; my/hugo-public-branch))) (error \u0026#34;push failed\u0026#34;)) (message \u0026#34;Yay!\u0026#34;))) (defun hugo-server-start () \u0026#34;Start hugo server in an inferior shell\u0026#34; (interactive) (let ((eshell-buffer-name (concat \u0026#34;*hugo-server-\u0026#34; my/hugo-root \u0026#34;*\u0026#34;))) (if (bufferp (get-buffer eshell-buffer-name)) (kill-buffer eshell-buffer-name)) (eshell) (eshell-return-to-prompt) (insert (concat \u0026#34;cd \u0026#34; my/hugo-root)) (eshell-send-input) (insert (concat my/hugo-bin \u0026#34; server -D --navigateToChanged\u0026#34;)) (eshell-send-input) (browse-url my/hugo-server-url) (message eshell-buffer-name)))) Hugo site skeleton Here\u0026rsquo;s my main hugo config file:\nCreate in ./hugo/config.yml baseURL: \u0026#34;https://blog.rymcg.tech/\u0026#34; languageCode: \u0026#34;en-us\u0026#34; DefaultContentLanguage: \u0026#34;en\u0026#34; title: \u0026#34;rymcg.tech\u0026#34; theme: \u0026#34;docdock\u0026#34; pygmentsCodeFences: true pygmentsUseClasses: true params: noHomeIcon: true noSearch: false showVisitedLinks: true ordersectionsby: \u0026#34;weight\u0026#34; themeVariant: \u0026#34;rymcg\u0026#34; subTitle: \u0026#34;Technology by Ryan McGuire\u0026#34; outputs: home: - HTML - RSS - JSON mediaTypes: \u0026#34;text/plain\u0026#34;: suffix: \u0026#34;org\u0026#34; Create our site header:\nCreate in ./hugo/content/_header.md rymcg.tech Import the theme:\nhugo-import-themeRun in ./hugo if [ ! -d themes/docdock ]; then mkdir -p themes git submodule add -f https://github.com/EnigmaCurry/hugo-theme-docdock themes/docdock fi Customize the header for each page, include any Hugo Page Variables:\nCreate in ./hugo/layouts/partials/custom-post-header.html \u0026lt;div id=\u0026#34;post-meta\u0026#34;\u0026gt; {{if $.Param \u0026#34;draft\u0026#34;}} \u0026lt;div class=\u0026#34;notices info\u0026#34;\u0026gt;This page is an unpublished draft.\u0026lt;/div\u0026gt; {{end}} {{if $.Param \u0026#34;author\u0026#34;}} Author: {{ $.Param \u0026#34;author\u0026#34;}}\u0026lt;br/\u0026gt; {{end}} {{if not .Date.IsZero}} Published: {{.Date.Format \u0026#34;January 1, 2006\u0026#34;}} {{if ne .Lastmod .Date}}(\u0026lt;b\u0026gt;last update: {{.Lastmod.Format \u0026#34;January 1, 2006\u0026#34;}}\u0026lt;/b\u0026gt;){{end}}\u0026lt;br/\u0026gt; {{end}} \u0026lt;/div\u0026gt; Create our own theme variant:\nCreate in ./hugo/static/css/theme-rymcg.css :root{ --MAIN-BACK-color:#ddd; --MAIN-TXT-color: #000; --MAIN-LINK-color:#3995b1; --MAIN-HOVER-color:#c51212; --SIDE-MAIN-color:#444; --SIDE-MAIN-TXT-color:#fff; --SIDE-FOCUS-BACK-color:#707070; --SIDE-FOCUS-FORE-color:black; --MENU-LINK-color:#fff; --MENU-ACTIVE-BACK-color:#505050; --MENU-ACTIVE-LINK-color:white; --NAV-HOVER-color:#bbb; } #header-wrapper { border-bottom: none; } #sidebar ul li.visited \u0026gt; a .read-icon { color: var(--SIDE-MAIN-color); } a { color: var(--MAIN-LINK-color); } a:hover { color: var(--MAIN-HOVER-color); } body { background-color: var(--MAIN-BACK-color); color: var(--MAIN-TXT-color) !important; } #body a.highlight:after { background-color: var(--MAIN-HOVER-color); } #sidebar { background-color: var(--SIDE-MAIN-color); } #sidebar #header-wrapper { background: var(--SIDE-MAIN-color); color: var(--BF-color) border-color: var(--SIDE-FOCUS-BACK-color); } #sidebar .searchbox { border-color: var(--BF-color); background: var(--SIDE-FOCUS-BACK-color); } #sidebar ul.topics \u0026gt; li.parent, #sidebar ul.topics \u0026gt; li.active { background: var(--SIDE-FOCUS-BACK-color); } #sidebar .searchbox * { color: var(--SIDE-FOCUS-FORE-color); } #sidebar a , #sidebar a:hover { color: var(--MENU-LINK-color); } #sidebar .parent li, #sidebar .active li { border-color: var(--MENU-ACTIVE-LINK-color); } #sidebar ul li.active \u0026gt; a { background: var(--MENU-ACTIVE-BACK-color); color: var(--MENU-ACTIVE-LINK-color) !important; } #sidebar ul li .category-icon { color: var(--MENU-LINK-color); } #sidebar #shortcuts h3 { color: var(--SIDE-MAIN-TXT-color); } .footline { border-color: var(--SIDE-FOCUS-BACK-color); } div.block-header { color: #fff; padding-left: 1em; font-family: monospace; font-weight: bold; border-radius: 8px 8px 0 0; } div.block-header { background-color: #4d4b54; } div.block-header.tangle { background-color: #4e3a82; } div.block-header.exec { background-color: #b93838; } .copy-to-clipboard { margin-top: -1px; } pre { border-radius: 0 0 8px 8px; } pre .copy-to-clipboard { background-color: #fff; border: 1px solid #272a2c !important; } pre .copy-to-clipboard:hover { background-color: #ffa; } div#tags { float: none; } div#breadcrumbs { width: calc(100% - 20px); } div#body-inner { max-width: 100ch; } div#body-inner h1 { margin-bottom: 0; } div#post-meta { font-size: 0.7em; font-family: sans-serif; margin-bottom: 3em; } div#body-inner pre { margin-top: 0; } #body .nav:hover { background-color: var(--NAV-HOVER-color); } Most syntax highlighting is done with Chroma, which is builtin to hugo. The site uses the perldoc theme:\nCreate in ./hugo/static/css/theme-rymcg.css /* perldoc syntax highlight style */ /* Background */ .chroma { background-color: #eeeedd } /* Error */ .chroma .err { color: #a61717; background-color: #e3d2d2 } /* LineHighlight */ .chroma .hl { background-color: #ffffcc; display: block; width: 100% } /* LineNumbers */ .chroma .ln { ; margin-right: 0.4em; padding: 0 0.4em 0 0.4em; } /* Keyword */ .chroma .k { color: #8b008b; font-weight: bold } /* KeywordConstant */ .chroma .kc { color: #8b008b; font-weight: bold } /* KeywordDeclaration */ .chroma .kd { color: #8b008b; font-weight: bold } /* KeywordNamespace */ .chroma .kn { color: #8b008b; font-weight: bold } /* KeywordPseudo */ .chroma .kp { color: #8b008b; font-weight: bold } /* KeywordReserved */ .chroma .kr { color: #8b008b; font-weight: bold } /* KeywordType */ .chroma .kt { color: #00688b; font-weight: bold } /* NameAttribute */ .chroma .na { color: #658b00 } /* NameBuiltin */ .chroma .nb { color: #658b00 } /* NameClass */ .chroma .nc { color: #008b45; font-weight: bold } /* NameConstant */ .chroma .no { color: #00688b } /* NameDecorator */ .chroma .nd { color: #707a7c } /* NameException */ .chroma .ne { color: #008b45; font-weight: bold } /* NameFunction */ .chroma .nf { color: #008b45 } /* NameNamespace */ .chroma .nn { color: #008b45 } /* NameTag */ .chroma .nt { color: #8b008b; font-weight: bold } /* NameVariable */ .chroma .nv { color: #00688b } /* LiteralString */ .chroma .s { color: #cd5555 } /* LiteralStringAffix */ .chroma .sa { color: #cd5555 } /* LiteralStringBacktick */ .chroma .sb { color: #cd5555 } /* LiteralStringChar */ .chroma .sc { color: #cd5555 } /* LiteralStringDelimiter */ .chroma .dl { color: #cd5555 } /* LiteralStringDoc */ .chroma .sd { color: #cd5555 } /* LiteralStringDouble */ .chroma .s2 { color: #cd5555 } /* LiteralStringEscape */ .chroma .se { color: #cd5555 } /* LiteralStringHeredoc */ .chroma .sh { color: #1c7e71; font-style: italic } /* LiteralStringInterpol */ .chroma .si { color: #cd5555 } /* LiteralStringOther */ .chroma .sx { color: #cb6c20 } /* LiteralStringRegex */ .chroma .sr { color: #1c7e71 } /* LiteralStringSingle */ .chroma .s1 { color: #cd5555 } /* LiteralStringSymbol */ .chroma .ss { color: #cd5555 } /* LiteralNumber */ .chroma .m { color: #b452cd } /* LiteralNumberBin */ .chroma .mb { color: #b452cd } /* LiteralNumberFloat */ .chroma .mf { color: #b452cd } /* LiteralNumberHex */ .chroma .mh { color: #b452cd } /* LiteralNumberInteger */ .chroma .mi { color: #b452cd } /* LiteralNumberIntegerLong */ .chroma .il { color: #b452cd } /* LiteralNumberOct */ .chroma .mo { color: #b452cd } /* OperatorWord */ .chroma .ow { color: #8b008b } /* Comment */ .chroma .c { color: #228b22 } /* CommentHashbang */ .chroma .ch { color: #228b22 } /* CommentMultiline */ .chroma .cm { color: #228b22 } /* CommentSingle */ .chroma .c1 { color: #228b22 } /* CommentSpecial */ .chroma .cs { color: #8b008b; font-weight: bold } /* CommentPreproc */ .chroma .cp { color: #1e889b } /* CommentPreprocFile */ .chroma .cpf { color: #1e889b } /* GenericDeleted */ .chroma .gd { color: #aa0000 } /* GenericEmph */ .chroma .ge { font-style: italic } /* GenericError */ .chroma .gr { color: #aa0000 } /* GenericHeading */ .chroma .gh { color: #000080; font-weight: bold } /* GenericInserted */ .chroma .gi { color: #00aa00 } /* GenericOutput */ .chroma .go { color: #888888 } /* GenericPrompt */ .chroma .gp { color: #555555 } /* GenericStrong */ .chroma .gs { font-weight: bold } /* GenericSubheading */ .chroma .gu { color: #800080; font-weight: bold } /* GenericTraceback */ .chroma .gt { color: #aa0000 } /* TextWhitespace */ .chroma .w { color: #bbbbbb } As a fallback, highlight.js is used for blocks that chroma can\u0026rsquo;t handle. Here\u0026rsquo;s a slight mod of the purebasic theme:\nCreate in ./hugo/static/css/hybrid.css .hljs { background: #eeeedd !important; display: block; overflow-x: auto; padding: 0.5em; } .hljs,.hljs-type,.hljs-function,.hljs-name,.hljs-number,.hljs-attr,.hljs-params,.hljs-subst { color: #000000; } .hljs-comment,.hljs-regexp,.hljs-section,.hljs-selector-pseudo,.hljs-addition { color: #00AAAA; } .hljs-title,.hljs-tag,.hljs-variable,.hljs-code { color: #006666; } .hljs-keyword,.hljs-class,.hljs-meta-keyword,.hljs-selector-class,.hljs-built_in,.hljs-builtin-name { color: #006666; font-weight: bold; } .hljs-string,.hljs-selector-attr { color: #0080FF; } .hljs-symbol,.hljs-link,.hljs-deletion,.hljs-attribute { color: #924B72; } .hljs-meta,.hljs-literal,.hljs-selector-id { color: #924B72; font-weight: bold; } .hljs-strong,.hljs-name { font-weight: bold; } .hljs-emphasis { font-style: italic; } Code block headers When reading code blocks in Org file source it\u0026rsquo;s pretty easy to see what file it\u0026rsquo;s referring to, by looking at the :tangle parameter:\nExample #+BEGIN_SRC emacs-lisp :tangle /some/path/example.el (messsage \u0026#34;example\u0026#34;) #+END_SRC But when this is exported to HTML, you don\u0026rsquo;t get to see the :tangle part, which means either the reader has to infer it from the context, or you need to add extra text to the document. The first form is confusing to the user reading in his web browser. The latter form means you\u0026rsquo;re repeating yourself, and when you refactor path names, you will have an additional thing you need to edit, or else an opportunity arises for the documentation to diverge from the code. Messy.\nLet\u0026rsquo;s automatically add headers to all the code blocks exported to HTML.\n Tangled code should have header with Create in $FILE Shell code blocks should have header with Run in $DIR Example blocks should have header with Example  Create in ./emacs/blog.el ;; original credit to John Kitchin - https://stackoverflow.com/a/38876439/56560 (defun rymcg/org-hugo-export-block-headers (backend) (let ((src-blocks (org-element-map (org-element-parse-buffer) \u0026#39;src-block #\u0026#39;identity))) (setq src-blocks (nreverse src-blocks)) (loop for src in src-blocks do (goto-char (org-element-property :begin src)) (let ((tangle (cdr (assoc :tangle (nth 2 (org-babel-get-src-block-info))))) (directory (cdr (assoc :dir (nth 2 (org-babel-get-src-block-info))))) (language-name (first (org-babel-get-src-block-info))) (block-name (nth 4 (org-babel-get-src-block-info)))) (let ((shell-block? (equal language-name \u0026#34;shell\u0026#34;)) (tangle-block? (not (equal tangle \u0026#34;no\u0026#34;)))) (let ((block-name-fmt (if block-name (format \u0026#34;%s\u0026lt;br/\u0026gt;\u0026#34; block-name) \u0026#34;\u0026#34;)) (html-class (cond (tangle-block? \u0026#34;block-header tangle\u0026#34;) (shell-block? \u0026#34;block-header exec\u0026#34;) (\u0026#34;block-header\u0026#34;))) (header-txt (cond (tangle-block? (format \u0026#34;Create in %s\u0026#34; tangle)) (shell-block? (concat \u0026#34;Run\u0026#34; (if directory (format \u0026#34; in %s\u0026#34; directory) \u0026#34;\u0026#34;))) ((not block-name) \u0026#34; \u0026#34;) (\u0026#34;\u0026#34;)))) (insert (format \u0026#34;\\n#+HTML: \u0026lt;div class=\u0026#39;%s\u0026#39;\u0026gt;%s%s\u0026lt;/div\u0026gt;\\n\u0026#34; html-class block-name-fmt header-txt))))))) (let ((ex-blocks (org-element-map (org-element-parse-buffer) \u0026#39;example-block #\u0026#39;identity))) (setq ex-blocks (nreverse ex-blocks)) (loop for ex in ex-blocks do (goto-char (org-element-property :begin ex)) (insert (format \u0026#34;\\n#+HTML: \u0026lt;div class=\u0026#39;block-header example\u0026#39;\u0026gt;Example\u0026lt;/div\u0026gt;\\n\u0026#34;))))) (defadvice org-hugo-export-subtree-to-md (around org-hugo-export-advice) (let ((org-export-before-processing-hook \u0026#39;(rymcg/org-hugo-export-block-headers))) ad-do-it)) (ad-activate \u0026#39;org-hugo-export-subtree-to-md) RSS Hugo ships with it\u0026rsquo;s own RSS template, but let\u0026rsquo;s create our own:\n Only include the 30 most recent entries. Display in reverse chronological order. Include any pages that have a date, including _index pages.  The date must be set in the front matter params, by ox-hugo.   Create in ./hugo/layouts/rss.xml \u0026lt;rss version=\u0026#34;2.0\u0026#34; xmlns:atom=\u0026#34;http://www.w3.org/2005/Atom\u0026#34;\u0026gt; \u0026lt;channel\u0026gt; \u0026lt;title\u0026gt;{{ .Site.Title }}\u0026lt;/title\u0026gt; \u0026lt;link\u0026gt;{{ .Permalink }}\u0026lt;/link\u0026gt; \u0026lt;description\u0026gt;Recent content on {{ .Site.Title }}\u0026lt;/description\u0026gt; \u0026lt;generator\u0026gt;Hugo -- gohugo.io\u0026lt;/generator\u0026gt; {{ with .Site.LanguageCode }} \u0026lt;language\u0026gt;{{.}}\u0026lt;/language\u0026gt; {{end}} {{ with .Site.Copyright }} \u0026lt;copyright\u0026gt;{{.}}\u0026lt;/copyright\u0026gt; {{end}} {{ if not .Date.IsZero }} \u0026lt;lastBuildDate\u0026gt;{{ .Date.Format \u0026#34;Mon, 02 Jan 2006 15:04:05 -0700\u0026#34; | safeHTML }}\u0026lt;/lastBuildDate\u0026gt;{{ end }} {{ range first 30 (where .Site.AllPages.ByDate.Reverse \u0026#34;Params.date\u0026#34; \u0026#34;!=\u0026#34; nil) }} \u0026lt;item\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;link\u0026gt;{{ .Permalink }}\u0026lt;/link\u0026gt; \u0026lt;pubDate\u0026gt;{{ .Date.Format \u0026#34;Mon, 02 Jan 2006 15:04:05 -0700\u0026#34; | safeHTML }}\u0026lt;/pubDate\u0026gt; {{ with .Site.Author.email }} \u0026lt;author\u0026gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}\u0026lt;/author\u0026gt;{{end}} \u0026lt;guid\u0026gt;{{ .Permalink }}\u0026lt;/guid\u0026gt; \u0026lt;description\u0026gt;{{ .Summary | html }}\u0026lt;/description\u0026gt; \u0026lt;/item\u0026gt;{{ end }} \u0026lt;/channel\u0026gt; \u0026lt;/rss\u0026gt; Add a link to the RSS in the page head:\nCreate in ./hugo/layouts/partials/custom-head.html {{ if .RSSLink }} \u0026lt;link href=\u0026#34;{{ .RSSLink }}\u0026#34; rel=\u0026#34;alternate\u0026#34; type=\u0026#34;application/rss+xml\u0026#34; title=\u0026#34;{{ .Site.Title }}\u0026#34; /\u0026gt; {{ end }}"
},
{
	"uri": "https://blog.rymcg.tech/emacs/emacs-post-1/",
	"title": "first emacs post and a rather unfortunately long title that just goes on and on and on and on.",
	"tags": [],
	"description": "",
	"content": " Hi emacsers!\nSubheading 1 Subheading 2 "
},
{
	"uri": "https://blog.rymcg.tech/ox-hugo/creating-content/",
	"title": "Creating content",
	"tags": [],
	"description": "",
	"content": " Linking to static files Put your images in ./hugo/static/images\nTest:  Each static directory needs to be whitelisted in .gitignore (already done for images subdir.)\n Half baked ideas Export the output of code blocks and timestamp of last run Create in ./emacs/blog.el (defadvice org-babel-insert-result (after org-babel-record-result-timestamp) (let ((code-block-params (nth 2 (org-babel-get-src-block-info))) (block-name (nth 4 (org-babel-get-src-block-info)))) (let ((timestamp (cdr (assoc :timestamp code-block-params))) (result-params (assoc :result-params code-block-params))) (if (and (equal timestamp \u0026#34;t\u0026#34;) (\u0026gt; (length block-name) 0) (member \u0026#34;html\u0026#34; result-params)) (save-excursion (goto-char (point-min)) (search-forward-regexp (concat \u0026#34;^\\w*#\\\\+RESULTS: \u0026#34; block-name \u0026#34;\\n\\w*#\\\\+BEGIN_EXPORT html\\n\u0026#34;)) (let ((beg (point))) (search-forward-regexp \u0026#34;^\\w*#\\\\+END_EXPORT\u0026#34;) (beginning-of-line) (kill-region beg (point))) (insert (format (concat \u0026#34;\u0026lt;div class=\\\u0026#34;block-header results\\\u0026#34;\u0026gt;\u0026#34; block-name \u0026#34; - Last run: %s\u0026lt;/div\u0026gt;\\n\u0026#34;) (format-time-string \u0026#34;%F %r\u0026#34;))) (insert (format (concat \u0026#34;\u0026lt;div class=\\\u0026#34;block-results\\\u0026#34; \u0026#34; \u0026#34;id=\\\u0026#34;results-%s\\\u0026#34;\u0026gt;\u0026lt;pre class=\\\u0026#34;chroma\\\u0026#34;\u0026gt;\\n\u0026#34;) block-name)) (yank) (insert \u0026#34;\u0026lt;/pre\u0026gt;\u0026lt;/div\u0026gt;\\n\u0026#34;)) (if (equal timestamp \u0026#34;t\u0026#34;) (message (concat \u0026#34;Result timestamping requires a #+NAME: \u0026#34; \u0026#34;and a \u0026#39;:results html\u0026#39; argument.\u0026#34;))))))) (ad-activate \u0026#39;org-babel-insert-result) Output requires the code block to have all these parameters:\n #+NAME:  A unique name for the code block ensures that the correct result block will be updated.  :timestamp t  Turns on the timestamp  :exports both  Exports both the code block itself, and it\u0026rsquo;s output, to HTML.  :results html  Formats the result as HTML.  :eval never-export  (Optional) Makes it so the block is not automatically evaluated on export. It has to be manually run.   testguyRun whoami ls Results and timestamp are exported to HTML each time the block is re-evaluated:\ntestguy - Last run: 2017-10-03 06:38:02 PM ryan blog blog.org  "
},
{
	"uri": "https://blog.rymcg.tech/emacs/elips-tips/",
	"title": "elisp tips",
	"tags": [],
	"description": "",
	"content": "\u0026nbsp; (message \u0026#34;Hi Emacsians!\u0026#34;)"
},
{
	"uri": "https://blog.rymcg.tech/ox-hugo/review/",
	"title": "Review",
	"tags": [],
	"description": "",
	"content": "OK, so having read this far, I\u0026rsquo;m expecting that you now have a bit of an environment setup. You\u0026rsquo;re not just reading this in a web browser, you\u0026rsquo;ve got Emacs open on one half of your screen, and a web browser on the other viewing this site. You can see the source, save any changes, and they livereload on your browser instantly. Nice!\nNow you have your own thing going. You can delete all the rest of this file. Make sure you keep all of this first section, it is now your documentation for your site. You are now a nomad, a wayfaring hacker, surviving the wastelands of NullDevia, and rebuilding anew! But only if you keep the instructions in this section, you\u0026rsquo;ll need those!\nThe rest of this file you can delete, or keep as a reference, but my narrative becomes your narrative, so edit it however you feel like.\nThe [BROKEN LINK: Local Variables] section includes important Emacs configuration parameters to setup this file for the live reload feature, so maybe keep that.\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/",
	"title": "Book",
	"tags": [],
	"description": "",
	"content": "Book 1 index.\nThis type of organization will generate this in the content/ directory:\nExample \u0026gt; tree book1 book1 ├── chapter1 │ ├── _index.md │ ├── section1.md │ └── section2.md ├── chapter2 │ ├── _index.md │ ├── section1.md │ └── section2.md └── _index.md  Chapter 1  Chapter 1 Section 1 Chapter 1 Section 2  Chapter 2  Chapter 2 Section 1 Chapter 2 Section 2   "
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter1/",
	"title": "Chapter 1 Index",
	"tags": [],
	"description": "",
	"content": "Introduction for chapter 1\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter2/",
	"title": "Chapter 2 Index",
	"tags": [],
	"description": "",
	"content": "Introduction for chapter 2\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter1/section1/",
	"title": "sub section 1",
	"tags": [],
	"description": "",
	"content": "Section 1 of chapter 1\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter2/section1/",
	"title": "sub section 1",
	"tags": [],
	"description": "",
	"content": "Section 1 of chapter 2\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter1/section2/",
	"title": "sub section 2",
	"tags": [],
	"description": "",
	"content": "Section 2 of chapter 1\n"
},
{
	"uri": "https://blog.rymcg.tech/book1/chapter2/section2/",
	"title": "sub section 2",
	"tags": [],
	"description": "",
	"content": "Section 2 of chapter 2\n"
},
{
	"uri": "https://blog.rymcg.tech/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "rymcg.tech\n"
},
{
	"uri": "https://blog.rymcg.tech/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.rymcg.tech/emacs/",
	"title": "Emacs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.rymcg.tech/tags/orgmode/",
	"title": "Orgmode",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://blog.rymcg.tech/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]